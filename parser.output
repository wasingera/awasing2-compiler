Terminals unused in grammar

   TOKEN_EOF
   FALSE
   TRUE
   WHILE
   TOKEN_ERROR
   COMMENT


State 11 conflicts: 1 reduce/reduce
State 12 conflicts: 1 reduce/reduce
State 13 conflicts: 1 reduce/reduce
State 15 conflicts: 1 reduce/reduce
State 16 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list
    2        | %empty

    3 decl_list: decl_var decl_list
    4          | decl_func decl_list
    5          | decl_var
    6          | decl_func

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON
    8         | IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON

   10 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

   12 type_func: INTEGER param_list_e
   13          | BOOLEAN param_list_e
   14          | CHAR param_list_e
   15          | STRING param_list_e
   16          | VOID param_list_e
   17          | AUTO param_list_e
   18          | FUNCTION type_func param_list_e

   19 param_list_e: OPEN_PAREN param_list CLOSE_PAREN
   20             | OPEN_PAREN CLOSE_PAREN

   21 param_list: IDENTIFIER COLON type_param COMMA param_list
   22           | IDENTIFIER COLON type_param

   23 type_param: INTEGER
   24           | BOOLEAN
   25           | CHAR
   26           | STRING
   27           | AUTO
   28           | FUNCTION
   29           | ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

   30 type_var: INTEGER
   31         | BOOLEAN
   32         | CHAR
   33         | STRING
   34         | AUTO
   35         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

   36 type_var_undefined_array: INTEGER
   37                         | BOOLEAN
   38                         | CHAR
   39                         | STRING
   40                         | AUTO
   41                         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

   43 stmt: if_stmt

   44 other_stmt: RETURN expr_or_e SEMICOLON
   45           | PRINT expr_list_e SEMICOLON
   46           | OPEN_CURLY stmt_list_e CLOSE_CURLY
   47           | expr_10 SEMICOLON
   48           | decl_var

   49 condition: OPEN_PAREN expr_10 CLOSE_PAREN

   50 if_stmt: matched_if_stmt
   51        | open_if_stmt

   52 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt
   53                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   54                | other_stmt

   55 open_if_stmt: IF condition if_stmt
   56             | IF condition matched_if_stmt ELSE open_if_stmt
   57             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

   58 expr_or_e: expr_10
   59          | %empty

   60 stmt_list_e: stmt_list
   61            | %empty

   62 stmt_list: stmt stmt_list
   63          | stmt

   64 expr_10: expr_9 EQUALS expr_10
   65        | expr_9 QUESTION expr_10 COLON expr_10
   66        | expr_9

   67 expr_9: expr_9 OR expr_8
   68       | expr_8

   69 expr_8: expr_8 AND expr_7
   70       | expr_7

   71 expr_7: expr_7 LT expr_6
   72       | expr_7 LE expr_6
   73       | expr_7 EE expr_6
   74       | expr_7 GE expr_6
   75       | expr_7 GT expr_6
   76       | expr_7 NE expr_6
   77       | expr_6

   78 expr_6: expr_6 PLUS expr_5
   79       | expr_6 MINUS expr_5
   80       | expr_5

   81 expr_5: expr_5 MULTIPLY expr_4
   82       | expr_5 DIVIDE expr_4
   83       | expr_5 REMAINDER expr_4
   84       | expr_4

   85 expr_4: expr_3 EXP expr_4
   86       | expr_3

   87 expr_3: MINUS expr_3
   88       | NOT expr_3
   89       | expr_2

   90 expr_2: expr_2 INCREMENT
   91       | expr_2 DECREMENT
   92       | expr_1

   93 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN
   94       | func_call
   95       | array_subscript
   96       | atomic

   97 func_call: ident_name OPEN_PAREN expr_list_e CLOSE_PAREN

   98 ident_name: IDENTIFIER

   99 array_subscript: ident_name bracket_set

  100 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
  101            | OPEN_SQUARE expr_10 CLOSE_SQUARE

  102 expr_list_e: expr_list
  103            | %empty

  104 expr_list: expr_10 COMMA expr_list
  105          | expr_10

  106 atomic: INTEGER_LITERAL
  107       | BOOLEAN_LITERAL
  108       | CHAR_LITERAL
  109       | STRING_LITERAL
  110       | ident_name
  111       | OPEN_CURLY expr_list CLOSE_CURLY


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259) 29 35 41 42
AUTO (260) 17 27 34 40
BOOLEAN (261) 13 24 31 37
CHAR (262) 14 25 32 38
ELSE (263) 52 56
FALSE (264)
FOR (265) 53 57
FUNCTION (266) 10 11 18 28
IF (267) 52 55 56
INTEGER (268) 12 23 30 36
PRINT (269) 45
RETURN (270) 44
STRING (271) 15 26 33 39
TRUE (272)
VOID (273) 16
WHILE (274)
INTEGER_LITERAL (275) 106
BOOLEAN_LITERAL (276) 107
CHAR_LITERAL (277) 108
STRING_LITERAL (278) 109
IDENTIFIER (279) 7 8 9 10 11 21 22 98
TOKEN_ERROR (280)
COMMENT (281)
SEMICOLON (282) 7 8 9 10 44 45 47 53 57
COLON (283) 7 8 9 10 11 21 22 65
QUESTION (284) 65
EQUALS (285) 8 9 11 64
GT (286) 75
GE (287) 74
LT (288) 71
LE (289) 72
EE (290) 73
NE (291) 76
AND (292) 69
OR (293) 67
INCREMENT (294) 90
DECREMENT (295) 91
OPEN_PAREN (296) 19 20 49 53 57 93 97
CLOSE_PAREN (297) 19 20 49 53 57 93 97
OPEN_SQUARE (298) 29 35 41 42 100 101
CLOSE_SQUARE (299) 29 35 41 42 100 101
OPEN_CURLY (300) 11 46 111
CLOSE_CURLY (301) 11 46 111
PLUS (302) 78
MINUS (303) 79 87
MULTIPLY (304) 81
DIVIDE (305) 82
REMAINDER (306) 83
EXP (307) 85
NOT (308) 88
COMMA (309) 21 104


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0
decl_list (57)
    on left: 3 4 5 6, on right: 1 3 4
decl_var (58)
    on left: 7 8 9, on right: 3 5 48
decl_func (59)
    on left: 10 11, on right: 4 6
type_func (60)
    on left: 12 13 14 15 16 17 18, on right: 10 11 18
param_list_e (61)
    on left: 19 20, on right: 12 13 14 15 16 17 18
param_list (62)
    on left: 21 22, on right: 19 21
type_param (63)
    on left: 23 24 25 26 27 28 29, on right: 21 22 29
type_var (64)
    on left: 30 31 32 33 34 35, on right: 7 8 35
type_var_undefined_array (65)
    on left: 36 37 38 39 40 41 42, on right: 9 41 42
stmt (66)
    on left: 43, on right: 62 63
other_stmt (67)
    on left: 44 45 46 47 48, on right: 54
condition (68)
    on left: 49, on right: 52 55 56
if_stmt (69)
    on left: 50 51, on right: 43 55
matched_if_stmt (70)
    on left: 52 53 54, on right: 50 52 53 56
open_if_stmt (71)
    on left: 55 56 57, on right: 51 56 57
expr_or_e (72)
    on left: 58 59, on right: 44 53 57
stmt_list_e (73)
    on left: 60 61, on right: 46
stmt_list (74)
    on left: 62 63, on right: 11 60 62
expr_10 (75)
    on left: 64 65 66, on right: 8 9 35 41 47 49 58 64 65 93 100 101
    104 105
expr_9 (76)
    on left: 67 68, on right: 64 65 66 67
expr_8 (77)
    on left: 69 70, on right: 67 68 69
expr_7 (78)
    on left: 71 72 73 74 75 76 77, on right: 69 70 71 72 73 74 75 76
expr_6 (79)
    on left: 78 79 80, on right: 71 72 73 74 75 76 77 78 79
expr_5 (80)
    on left: 81 82 83 84, on right: 78 79 80 81 82 83
expr_4 (81)
    on left: 85 86, on right: 81 82 83 84 85
expr_3 (82)
    on left: 87 88 89, on right: 85 86 87 88
expr_2 (83)
    on left: 90 91 92, on right: 89 90 91
expr_1 (84)
    on left: 93 94 95 96, on right: 92
func_call (85)
    on left: 97, on right: 94
ident_name (86)
    on left: 98, on right: 97 99 110
array_subscript (87)
    on left: 99, on right: 95
bracket_set (88)
    on left: 100 101, on right: 99 100
expr_list_e (89)
    on left: 102 103, on right: 45 97
expr_list (90)
    on left: 104 105, on right: 102 104 111
atomic (91)
    on left: 106 107 108 109 110 111, on right: 96


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2        | . %empty  [$end]
    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program    go to state 2
    decl_list  go to state 3
    decl_var   go to state 4
    decl_func  go to state 5


State 1

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER . COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: IDENTIFIER . COLON FUNCTION type_func SEMICOLON
   11          | IDENTIFIER . COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    COLON  shift, and go to state 6


State 2

    0 $accept: program . $end

    $end  shift, and go to state 7


State 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


State 4

    3 decl_list: . decl_var decl_list
    3          | decl_var . decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    5          | decl_var .  [$end]
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 5 (decl_list)

    decl_list  go to state 8
    decl_var   go to state 4
    decl_func  go to state 5


State 5

    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    4          | decl_func . decl_list
    5          | . decl_var
    6          | . decl_func
    6          | decl_func .  [$end]
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 6 (decl_list)

    decl_list  go to state 9
    decl_var   go to state 4
    decl_func  go to state 5


State 6

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER COLON . type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: IDENTIFIER COLON . FUNCTION type_func SEMICOLON
   11          | IDENTIFIER COLON . FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: . INTEGER
   37                         | . BOOLEAN
   38                         | . CHAR
   39                         | . STRING
   40                         | . AUTO
   41                         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

    ARRAY     shift, and go to state 10
    AUTO      shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    CHAR      shift, and go to state 13
    FUNCTION  shift, and go to state 14
    INTEGER   shift, and go to state 15
    STRING    shift, and go to state 16

    type_var                  go to state 17
    type_var_undefined_array  go to state 18


State 7

    0 $accept: program $end .

    $default  accept


State 8

    3 decl_list: decl_var decl_list .

    $default  reduce using rule 3 (decl_list)


State 9

    4 decl_list: decl_func decl_list .

    $default  reduce using rule 4 (decl_list)


State 10

   35 type_var: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   41 type_var_undefined_array: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | ARRAY . OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

    OPEN_SQUARE  shift, and go to state 19


State 11

   34 type_var: AUTO .  [SEMICOLON, EQUALS]
   40 type_var_undefined_array: AUTO .  [EQUALS]

    EQUALS    reduce using rule 34 (type_var)
    EQUALS    [reduce using rule 40 (type_var_undefined_array)]
    $default  reduce using rule 34 (type_var)


State 12

   31 type_var: BOOLEAN .  [SEMICOLON, EQUALS]
   37 type_var_undefined_array: BOOLEAN .  [EQUALS]

    EQUALS    reduce using rule 31 (type_var)
    EQUALS    [reduce using rule 37 (type_var_undefined_array)]
    $default  reduce using rule 31 (type_var)


State 13

   32 type_var: CHAR .  [SEMICOLON, EQUALS]
   38 type_var_undefined_array: CHAR .  [EQUALS]

    EQUALS    reduce using rule 32 (type_var)
    EQUALS    [reduce using rule 38 (type_var_undefined_array)]
    $default  reduce using rule 32 (type_var)


State 14

   10 decl_func: IDENTIFIER COLON FUNCTION . type_func SEMICOLON
   11          | IDENTIFIER COLON FUNCTION . type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   12 type_func: . INTEGER param_list_e
   13          | . BOOLEAN param_list_e
   14          | . CHAR param_list_e
   15          | . STRING param_list_e
   16          | . VOID param_list_e
   17          | . AUTO param_list_e
   18          | . FUNCTION type_func param_list_e

    AUTO      shift, and go to state 20
    BOOLEAN   shift, and go to state 21
    CHAR      shift, and go to state 22
    FUNCTION  shift, and go to state 23
    INTEGER   shift, and go to state 24
    STRING    shift, and go to state 25
    VOID      shift, and go to state 26

    type_func  go to state 27


State 15

   30 type_var: INTEGER .  [SEMICOLON, EQUALS]
   36 type_var_undefined_array: INTEGER .  [EQUALS]

    EQUALS    reduce using rule 30 (type_var)
    EQUALS    [reduce using rule 36 (type_var_undefined_array)]
    $default  reduce using rule 30 (type_var)


State 16

   33 type_var: STRING .  [SEMICOLON, EQUALS]
   39 type_var_undefined_array: STRING .  [EQUALS]

    EQUALS    reduce using rule 33 (type_var)
    EQUALS    [reduce using rule 39 (type_var_undefined_array)]
    $default  reduce using rule 33 (type_var)


State 17

    7 decl_var: IDENTIFIER COLON type_var . SEMICOLON
    8         | IDENTIFIER COLON type_var . EQUALS expr_10 SEMICOLON

    SEMICOLON  shift, and go to state 28
    EQUALS     shift, and go to state 29


State 18

    9 decl_var: IDENTIFIER COLON type_var_undefined_array . EQUALS expr_10 SEMICOLON

    EQUALS  shift, and go to state 30


State 19

   35 type_var: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var
   41 type_var_undefined_array: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | ARRAY OPEN_SQUARE . CLOSE_SQUARE type_var_undefined_array
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    CLOSE_SQUARE     shift, and go to state 37
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 41
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 20

   17 type_func: AUTO . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 56


State 21

   13 type_func: BOOLEAN . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 57


State 22

   14 type_func: CHAR . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 58


State 23

   12 type_func: . INTEGER param_list_e
   13          | . BOOLEAN param_list_e
   14          | . CHAR param_list_e
   15          | . STRING param_list_e
   16          | . VOID param_list_e
   17          | . AUTO param_list_e
   18          | . FUNCTION type_func param_list_e
   18          | FUNCTION . type_func param_list_e

    AUTO      shift, and go to state 20
    BOOLEAN   shift, and go to state 21
    CHAR      shift, and go to state 22
    FUNCTION  shift, and go to state 23
    INTEGER   shift, and go to state 24
    STRING    shift, and go to state 25
    VOID      shift, and go to state 26

    type_func  go to state 59


State 24

   12 type_func: INTEGER . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 60


State 25

   15 type_func: STRING . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 61


State 26

   16 type_func: VOID . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 62


State 27

   10 decl_func: IDENTIFIER COLON FUNCTION type_func . SEMICOLON
   11          | IDENTIFIER COLON FUNCTION type_func . EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    SEMICOLON  shift, and go to state 63
    EQUALS     shift, and go to state 64


State 28

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON .

    $default  reduce using rule 7 (decl_var)


State 29

    8 decl_var: IDENTIFIER COLON type_var EQUALS . expr_10 SEMICOLON
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 65
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 30

    9 decl_var: IDENTIFIER COLON type_var_undefined_array EQUALS . expr_10 SEMICOLON
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 66
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 31

  106 atomic: INTEGER_LITERAL .

    $default  reduce using rule 106 (atomic)


State 32

  107 atomic: BOOLEAN_LITERAL .

    $default  reduce using rule 107 (atomic)


State 33

  108 atomic: CHAR_LITERAL .

    $default  reduce using rule 108 (atomic)


State 34

  109 atomic: STRING_LITERAL .

    $default  reduce using rule 109 (atomic)


State 35

   98 ident_name: IDENTIFIER .

    $default  reduce using rule 98 (ident_name)


State 36

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   93       | OPEN_PAREN . expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 67
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 37

   36 type_var_undefined_array: . INTEGER
   37                         | . BOOLEAN
   38                         | . CHAR
   39                         | . STRING
   40                         | . AUTO
   41                         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array
   42                         | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_var_undefined_array

    ARRAY    shift, and go to state 68
    AUTO     shift, and go to state 69
    BOOLEAN  shift, and go to state 70
    CHAR     shift, and go to state 71
    INTEGER  shift, and go to state 72
    STRING   shift, and go to state 73

    type_var_undefined_array  go to state 74


State 38

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  104 expr_list: . expr_10 COMMA expr_list
  105          | . expr_10
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY
  111       | OPEN_CURLY . expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 75
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list        go to state 76
    atomic           go to state 54


State 39

   87 expr_3: . MINUS expr_3
   87       | MINUS . expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_3           go to state 77
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 40

   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   88       | NOT . expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_3           go to state 78
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 41

   35 type_var: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var
   41 type_var_undefined_array: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var_undefined_array

    CLOSE_SQUARE  shift, and go to state 79


State 42

   64 expr_10: expr_9 . EQUALS expr_10
   65        | expr_9 . QUESTION expr_10 COLON expr_10
   66        | expr_9 .  [SEMICOLON, COLON, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   67 expr_9: expr_9 . OR expr_8

    QUESTION  shift, and go to state 80
    EQUALS    shift, and go to state 81
    OR        shift, and go to state 82

    $default  reduce using rule 66 (expr_10)


State 43

   68 expr_9: expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   69 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 83

    $default  reduce using rule 68 (expr_9)


State 44

   70 expr_8: expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_7: expr_7 . LT expr_6
   72       | expr_7 . LE expr_6
   73       | expr_7 . EE expr_6
   74       | expr_7 . GE expr_6
   75       | expr_7 . GT expr_6
   76       | expr_7 . NE expr_6

    GT  shift, and go to state 84
    GE  shift, and go to state 85
    LT  shift, and go to state 86
    LE  shift, and go to state 87
    EE  shift, and go to state 88
    NE  shift, and go to state 89

    $default  reduce using rule 70 (expr_8)


State 45

   77 expr_7: expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 77 (expr_7)


State 46

   80 expr_6: expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   81 expr_5: expr_5 . MULTIPLY expr_4
   82       | expr_5 . DIVIDE expr_4
   83       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 92
    DIVIDE     shift, and go to state 93
    REMAINDER  shift, and go to state 94

    $default  reduce using rule 80 (expr_6)


State 47

   84 expr_5: expr_4 .

    $default  reduce using rule 84 (expr_5)


State 48

   85 expr_4: expr_3 . EXP expr_4
   86       | expr_3 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, COMMA]

    EXP  shift, and go to state 95

    $default  reduce using rule 86 (expr_4)


State 49

   89 expr_3: expr_2 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]
   90 expr_2: expr_2 . INCREMENT
   91       | expr_2 . DECREMENT

    INCREMENT  shift, and go to state 96
    DECREMENT  shift, and go to state 97

    $default  reduce using rule 89 (expr_3)


State 50

   92 expr_2: expr_1 .

    $default  reduce using rule 92 (expr_2)


State 51

   94 expr_1: func_call .

    $default  reduce using rule 94 (expr_1)


State 52

   97 func_call: ident_name . OPEN_PAREN expr_list_e CLOSE_PAREN
   99 array_subscript: ident_name . bracket_set
  100 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
  101            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  110 atomic: ident_name .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_PAREN   shift, and go to state 98
    OPEN_SQUARE  shift, and go to state 99

    $default  reduce using rule 110 (atomic)

    bracket_set  go to state 100


State 53

   95 expr_1: array_subscript .

    $default  reduce using rule 95 (expr_1)


State 54

   96 expr_1: atomic .

    $default  reduce using rule 96 (expr_1)


State 55

   19 param_list_e: OPEN_PAREN . param_list CLOSE_PAREN
   20             | OPEN_PAREN . CLOSE_PAREN
   21 param_list: . IDENTIFIER COLON type_param COMMA param_list
   22           | . IDENTIFIER COLON type_param

    IDENTIFIER   shift, and go to state 101
    CLOSE_PAREN  shift, and go to state 102

    param_list  go to state 103


State 56

   17 type_func: AUTO param_list_e .

    $default  reduce using rule 17 (type_func)


State 57

   13 type_func: BOOLEAN param_list_e .

    $default  reduce using rule 13 (type_func)


State 58

   14 type_func: CHAR param_list_e .

    $default  reduce using rule 14 (type_func)


State 59

   18 type_func: FUNCTION type_func . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 104


State 60

   12 type_func: INTEGER param_list_e .

    $default  reduce using rule 12 (type_func)


State 61

   15 type_func: STRING param_list_e .

    $default  reduce using rule 15 (type_func)


State 62

   16 type_func: VOID param_list_e .

    $default  reduce using rule 16 (type_func)


State 63

   10 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON .

    $default  reduce using rule 10 (decl_func)


State 64

   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS . OPEN_CURLY stmt_list CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 105


State 65

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 106


State 66

    9 decl_var: IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 107


State 67

   93 expr_1: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 108


State 68

   41 type_var_undefined_array: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | ARRAY . OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

    OPEN_SQUARE  shift, and go to state 109


State 69

   40 type_var_undefined_array: AUTO .

    $default  reduce using rule 40 (type_var_undefined_array)


State 70

   37 type_var_undefined_array: BOOLEAN .

    $default  reduce using rule 37 (type_var_undefined_array)


State 71

   38 type_var_undefined_array: CHAR .

    $default  reduce using rule 38 (type_var_undefined_array)


State 72

   36 type_var_undefined_array: INTEGER .

    $default  reduce using rule 36 (type_var_undefined_array)


State 73

   39 type_var_undefined_array: STRING .

    $default  reduce using rule 39 (type_var_undefined_array)


State 74

   42 type_var_undefined_array: ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array .

    $default  reduce using rule 42 (type_var_undefined_array)


State 75

  104 expr_list: expr_10 . COMMA expr_list
  105          | expr_10 .  [SEMICOLON, CLOSE_PAREN, CLOSE_CURLY]

    COMMA  shift, and go to state 110

    $default  reduce using rule 105 (expr_list)


State 76

  111 atomic: OPEN_CURLY expr_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 111


State 77

   87 expr_3: MINUS expr_3 .

    $default  reduce using rule 87 (expr_3)


State 78

   88 expr_3: NOT expr_3 .

    $default  reduce using rule 88 (expr_3)


State 79

   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var
   36 type_var_undefined_array: . INTEGER
   37                         | . BOOLEAN
   38                         | . CHAR
   39                         | . STRING
   40                         | . AUTO
   41                         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   41                         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var_undefined_array
   42                         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var                  go to state 112
    type_var_undefined_array  go to state 113


State 80

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   65        | expr_9 QUESTION . expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 114
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 81

   64 expr_10: . expr_9 EQUALS expr_10
   64        | expr_9 EQUALS . expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 115
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 82

   67 expr_9: expr_9 OR . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_8           go to state 116
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 83

   69 expr_8: expr_8 AND . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_7           go to state 117
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 84

   75 expr_7: expr_7 GT . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 118
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 85

   74 expr_7: expr_7 GE . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 119
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 86

   71 expr_7: expr_7 LT . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 120
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 87

   72 expr_7: expr_7 LE . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 121
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 88

   73 expr_7: expr_7 EE . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 122
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 89

   76 expr_7: expr_7 NE . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 123
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 90

   78 expr_6: expr_6 PLUS . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_5           go to state 124
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 91

   79 expr_6: expr_6 MINUS . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_5           go to state 125
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 92

   81 expr_5: expr_5 MULTIPLY . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 126
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 93

   82 expr_5: expr_5 DIVIDE . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 127
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 94

   83 expr_5: expr_5 REMAINDER . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 128
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 95

   85 expr_4: . expr_3 EXP expr_4
   85       | expr_3 EXP . expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 129
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 96

   90 expr_2: expr_2 INCREMENT .

    $default  reduce using rule 90 (expr_2)


State 97

   91 expr_2: expr_2 DECREMENT .

    $default  reduce using rule 91 (expr_2)


State 98

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   97          | ident_name OPEN_PAREN . expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  102 expr_list_e: . expr_list
  103            | . %empty  [CLOSE_PAREN]
  104 expr_list: . expr_10 COMMA expr_list
  105          | . expr_10
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 103 (expr_list_e)

    expr_10          go to state 75
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list_e      go to state 130
    expr_list        go to state 131
    atomic           go to state 54


State 99

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  100 bracket_set: OPEN_SQUARE . expr_10 CLOSE_SQUARE bracket_set
  101            | OPEN_SQUARE . expr_10 CLOSE_SQUARE
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 132
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 100

   99 array_subscript: ident_name bracket_set .

    $default  reduce using rule 99 (array_subscript)


State 101

   21 param_list: IDENTIFIER . COLON type_param COMMA param_list
   22           | IDENTIFIER . COLON type_param

    COLON  shift, and go to state 133


State 102

   20 param_list_e: OPEN_PAREN CLOSE_PAREN .

    $default  reduce using rule 20 (param_list_e)


State 103

   19 param_list_e: OPEN_PAREN param_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 134


State 104

   18 type_func: FUNCTION type_func param_list_e .

    $default  reduce using rule 18 (type_func)


State 105

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY . stmt_list CLOSE_CURLY
   43 stmt: . if_stmt
   44 other_stmt: . RETURN expr_or_e SEMICOLON
   45           | . PRINT expr_list_e SEMICOLON
   46           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   47           | . expr_10 SEMICOLON
   48           | . decl_var
   50 if_stmt: . matched_if_stmt
   51        | . open_if_stmt
   52 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   53                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   54                | . other_stmt
   55 open_if_stmt: . IF condition if_stmt
   56             | . IF condition matched_if_stmt ELSE open_if_stmt
   57             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   62 stmt_list: . stmt stmt_list
   63          | . stmt
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 135
    IF               shift, and go to state 136
    PRINT            shift, and go to state 137
    RETURN           shift, and go to state 138
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 139
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 140
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 141
    stmt             go to state 142
    other_stmt       go to state 143
    if_stmt          go to state 144
    matched_if_stmt  go to state 145
    open_if_stmt     go to state 146
    stmt_list        go to state 147
    expr_10          go to state 148
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 106

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 8 (decl_var)


State 107

    9 decl_var: IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 9 (decl_var)


State 108

   93 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 93 (expr_1)


State 109

   41 type_var_undefined_array: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | ARRAY OPEN_SQUARE . CLOSE_SQUARE type_var_undefined_array
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    CLOSE_SQUARE     shift, and go to state 37
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 149
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 110

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  104 expr_list: . expr_10 COMMA expr_list
  104          | expr_10 COMMA . expr_list
  105          | . expr_10
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 75
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list        go to state 150
    atomic           go to state 54


State 111

  111 atomic: OPEN_CURLY expr_list CLOSE_CURLY .

    $default  reduce using rule 111 (atomic)


State 112

   35 type_var: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var .

    $default  reduce using rule 35 (type_var)


State 113

   41 type_var_undefined_array: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array .

    $default  reduce using rule 41 (type_var_undefined_array)


State 114

   65 expr_10: expr_9 QUESTION expr_10 . COLON expr_10

    COLON  shift, and go to state 151


State 115

   64 expr_10: expr_9 EQUALS expr_10 .

    $default  reduce using rule 64 (expr_10)


State 116

   67 expr_9: expr_9 OR expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   69 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 83

    $default  reduce using rule 67 (expr_9)


State 117

   69 expr_8: expr_8 AND expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_7: expr_7 . LT expr_6
   72       | expr_7 . LE expr_6
   73       | expr_7 . EE expr_6
   74       | expr_7 . GE expr_6
   75       | expr_7 . GT expr_6
   76       | expr_7 . NE expr_6

    GT  shift, and go to state 84
    GE  shift, and go to state 85
    LT  shift, and go to state 86
    LE  shift, and go to state 87
    EE  shift, and go to state 88
    NE  shift, and go to state 89

    $default  reduce using rule 69 (expr_8)


State 118

   75 expr_7: expr_7 GT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 75 (expr_7)


State 119

   74 expr_7: expr_7 GE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 74 (expr_7)


State 120

   71 expr_7: expr_7 LT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 71 (expr_7)


State 121

   72 expr_7: expr_7 LE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 72 (expr_7)


State 122

   73 expr_7: expr_7 EE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 73 (expr_7)


State 123

   76 expr_7: expr_7 NE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   78 expr_6: expr_6 . PLUS expr_5
   79       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 76 (expr_7)


State 124

   78 expr_6: expr_6 PLUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   81 expr_5: expr_5 . MULTIPLY expr_4
   82       | expr_5 . DIVIDE expr_4
   83       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 92
    DIVIDE     shift, and go to state 93
    REMAINDER  shift, and go to state 94

    $default  reduce using rule 78 (expr_6)


State 125

   79 expr_6: expr_6 MINUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   81 expr_5: expr_5 . MULTIPLY expr_4
   82       | expr_5 . DIVIDE expr_4
   83       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 92
    DIVIDE     shift, and go to state 93
    REMAINDER  shift, and go to state 94

    $default  reduce using rule 79 (expr_6)


State 126

   81 expr_5: expr_5 MULTIPLY expr_4 .

    $default  reduce using rule 81 (expr_5)


State 127

   82 expr_5: expr_5 DIVIDE expr_4 .

    $default  reduce using rule 82 (expr_5)


State 128

   83 expr_5: expr_5 REMAINDER expr_4 .

    $default  reduce using rule 83 (expr_5)


State 129

   85 expr_4: expr_3 EXP expr_4 .

    $default  reduce using rule 85 (expr_4)


State 130

   97 func_call: ident_name OPEN_PAREN expr_list_e . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 152


State 131

  102 expr_list_e: expr_list .

    $default  reduce using rule 102 (expr_list_e)


State 132

  100 bracket_set: OPEN_SQUARE expr_10 . CLOSE_SQUARE bracket_set
  101            | OPEN_SQUARE expr_10 . CLOSE_SQUARE

    CLOSE_SQUARE  shift, and go to state 153


State 133

   21 param_list: IDENTIFIER COLON . type_param COMMA param_list
   22           | IDENTIFIER COLON . type_param
   23 type_param: . INTEGER
   24           | . BOOLEAN
   25           | . CHAR
   26           | . STRING
   27           | . AUTO
   28           | . FUNCTION
   29           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

    ARRAY     shift, and go to state 154
    AUTO      shift, and go to state 155
    BOOLEAN   shift, and go to state 156
    CHAR      shift, and go to state 157
    FUNCTION  shift, and go to state 158
    INTEGER   shift, and go to state 159
    STRING    shift, and go to state 160

    type_param  go to state 161


State 134

   19 param_list_e: OPEN_PAREN param_list CLOSE_PAREN .

    $default  reduce using rule 19 (param_list_e)


State 135

   53 matched_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    OPEN_PAREN  shift, and go to state 162


State 136

   49 condition: . OPEN_PAREN expr_10 CLOSE_PAREN
   52 matched_if_stmt: IF . condition matched_if_stmt ELSE matched_if_stmt
   55 open_if_stmt: IF . condition if_stmt
   56             | IF . condition matched_if_stmt ELSE open_if_stmt

    OPEN_PAREN  shift, and go to state 163

    condition  go to state 164


State 137

   45 other_stmt: PRINT . expr_list_e SEMICOLON
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  102 expr_list_e: . expr_list
  103            | . %empty  [SEMICOLON]
  104 expr_list: . expr_10 COMMA expr_list
  105          | . expr_10
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 103 (expr_list_e)

    expr_10          go to state 75
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list_e      go to state 165
    expr_list        go to state 131
    atomic           go to state 54


State 138

   44 other_stmt: RETURN . expr_or_e SEMICOLON
   58 expr_or_e: . expr_10
   59          | . %empty  [SEMICOLON]
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 59 (expr_or_e)

    expr_or_e        go to state 166
    expr_10          go to state 167
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 139

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER . COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   98 ident_name: IDENTIFIER .  [SEMICOLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, OPEN_PAREN, OPEN_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    COLON  shift, and go to state 168

    $default  reduce using rule 98 (ident_name)


State 140

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   43 stmt: . if_stmt
   44 other_stmt: . RETURN expr_or_e SEMICOLON
   45           | . PRINT expr_list_e SEMICOLON
   46           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   46           | OPEN_CURLY . stmt_list_e CLOSE_CURLY
   47           | . expr_10 SEMICOLON
   48           | . decl_var
   50 if_stmt: . matched_if_stmt
   51        | . open_if_stmt
   52 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   53                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   54                | . other_stmt
   55 open_if_stmt: . IF condition if_stmt
   56             | . IF condition matched_if_stmt ELSE open_if_stmt
   57             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   60 stmt_list_e: . stmt_list
   61            | . %empty  [CLOSE_CURLY]
   62 stmt_list: . stmt stmt_list
   63          | . stmt
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  104 expr_list: . expr_10 COMMA expr_list
  105          | . expr_10
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY
  111       | OPEN_CURLY . expr_list CLOSE_CURLY

    FOR              shift, and go to state 135
    IF               shift, and go to state 136
    PRINT            shift, and go to state 137
    RETURN           shift, and go to state 138
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 139
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 140
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 61 (stmt_list_e)

    decl_var         go to state 141
    stmt             go to state 142
    other_stmt       go to state 143
    if_stmt          go to state 144
    matched_if_stmt  go to state 145
    open_if_stmt     go to state 146
    stmt_list_e      go to state 169
    stmt_list        go to state 170
    expr_10          go to state 171
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list        go to state 76
    atomic           go to state 54


State 141

   48 other_stmt: decl_var .

    $default  reduce using rule 48 (other_stmt)


State 142

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   43 stmt: . if_stmt
   44 other_stmt: . RETURN expr_or_e SEMICOLON
   45           | . PRINT expr_list_e SEMICOLON
   46           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   47           | . expr_10 SEMICOLON
   48           | . decl_var
   50 if_stmt: . matched_if_stmt
   51        | . open_if_stmt
   52 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   53                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   54                | . other_stmt
   55 open_if_stmt: . IF condition if_stmt
   56             | . IF condition matched_if_stmt ELSE open_if_stmt
   57             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   62 stmt_list: . stmt stmt_list
   62          | stmt . stmt_list
   63          | . stmt
   63          | stmt .  [CLOSE_CURLY]
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 135
    IF               shift, and go to state 136
    PRINT            shift, and go to state 137
    RETURN           shift, and go to state 138
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 139
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 140
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 63 (stmt_list)

    decl_var         go to state 141
    stmt             go to state 142
    other_stmt       go to state 143
    if_stmt          go to state 144
    matched_if_stmt  go to state 145
    open_if_stmt     go to state 146
    stmt_list        go to state 172
    expr_10          go to state 148
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 143

   54 matched_if_stmt: other_stmt .

    $default  reduce using rule 54 (matched_if_stmt)


State 144

   43 stmt: if_stmt .

    $default  reduce using rule 43 (stmt)


State 145

   50 if_stmt: matched_if_stmt .

    $default  reduce using rule 50 (if_stmt)


State 146

   51 if_stmt: open_if_stmt .

    $default  reduce using rule 51 (if_stmt)


State 147

   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 173


State 148

   47 other_stmt: expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 174


State 149

   41 type_var_undefined_array: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var_undefined_array

    CLOSE_SQUARE  shift, and go to state 175


State 150

  104 expr_list: expr_10 COMMA expr_list .

    $default  reduce using rule 104 (expr_list)


State 151

   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   65        | expr_9 QUESTION expr_10 COLON . expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 176
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 152

   97 func_call: ident_name OPEN_PAREN expr_list_e CLOSE_PAREN .

    $default  reduce using rule 97 (func_call)


State 153

  100 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
  100            | OPEN_SQUARE expr_10 CLOSE_SQUARE . bracket_set
  101            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  101            | OPEN_SQUARE expr_10 CLOSE_SQUARE .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_SQUARE  shift, and go to state 99

    $default  reduce using rule 101 (bracket_set)

    bracket_set  go to state 177


State 154

   29 type_param: ARRAY . OPEN_SQUARE CLOSE_SQUARE type_param

    OPEN_SQUARE  shift, and go to state 178


State 155

   27 type_param: AUTO .

    $default  reduce using rule 27 (type_param)


State 156

   24 type_param: BOOLEAN .

    $default  reduce using rule 24 (type_param)


State 157

   25 type_param: CHAR .

    $default  reduce using rule 25 (type_param)


State 158

   28 type_param: FUNCTION .

    $default  reduce using rule 28 (type_param)


State 159

   23 type_param: INTEGER .

    $default  reduce using rule 23 (type_param)


State 160

   26 type_param: STRING .

    $default  reduce using rule 26 (type_param)


State 161

   21 param_list: IDENTIFIER COLON type_param . COMMA param_list
   22           | IDENTIFIER COLON type_param .  [CLOSE_PAREN]

    COMMA  shift, and go to state 179

    $default  reduce using rule 22 (param_list)


State 162

   53 matched_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   58 expr_or_e: . expr_10
   59          | . %empty  [SEMICOLON]
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 59 (expr_or_e)

    expr_or_e        go to state 180
    expr_10          go to state 167
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 163

   49 condition: OPEN_PAREN . expr_10 CLOSE_PAREN
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 181
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 164

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   44 other_stmt: . RETURN expr_or_e SEMICOLON
   45           | . PRINT expr_list_e SEMICOLON
   46           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   47           | . expr_10 SEMICOLON
   48           | . decl_var
   50 if_stmt: . matched_if_stmt
   51        | . open_if_stmt
   52 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   52                | IF condition . matched_if_stmt ELSE matched_if_stmt
   53                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   54                | . other_stmt
   55 open_if_stmt: . IF condition if_stmt
   55             | IF condition . if_stmt
   56             | . IF condition matched_if_stmt ELSE open_if_stmt
   56             | IF condition . matched_if_stmt ELSE open_if_stmt
   57             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 135
    IF               shift, and go to state 136
    PRINT            shift, and go to state 137
    RETURN           shift, and go to state 138
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 139
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 140
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 141
    other_stmt       go to state 143
    if_stmt          go to state 182
    matched_if_stmt  go to state 183
    open_if_stmt     go to state 146
    expr_10          go to state 148
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 165

   45 other_stmt: PRINT expr_list_e . SEMICOLON

    SEMICOLON  shift, and go to state 184


State 166

   44 other_stmt: RETURN expr_or_e . SEMICOLON

    SEMICOLON  shift, and go to state 185


State 167

   58 expr_or_e: expr_10 .

    $default  reduce using rule 58 (expr_or_e)


State 168

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER COLON . type_var_undefined_array EQUALS expr_10 SEMICOLON
   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: . INTEGER
   37                         | . BOOLEAN
   38                         | . CHAR
   39                         | . STRING
   40                         | . AUTO
   41                         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   42                         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var                  go to state 17
    type_var_undefined_array  go to state 18


State 169

   46 other_stmt: OPEN_CURLY stmt_list_e . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 186


State 170

   60 stmt_list_e: stmt_list .

    $default  reduce using rule 60 (stmt_list_e)


State 171

   47 other_stmt: expr_10 . SEMICOLON
  104 expr_list: expr_10 . COMMA expr_list
  105          | expr_10 .  [CLOSE_CURLY]

    SEMICOLON  shift, and go to state 174
    COMMA      shift, and go to state 110

    $default  reduce using rule 105 (expr_list)


State 172

   62 stmt_list: stmt stmt_list .

    $default  reduce using rule 62 (stmt_list)


State 173

   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY .

    $default  reduce using rule 11 (decl_func)


State 174

   47 other_stmt: expr_10 SEMICOLON .

    $default  reduce using rule 47 (other_stmt)


State 175

   36 type_var_undefined_array: . INTEGER
   37                         | . BOOLEAN
   38                         | . CHAR
   39                         | . STRING
   40                         | . AUTO
   41                         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var_undefined_array
   41                         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var_undefined_array
   42                         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var_undefined_array

    ARRAY    shift, and go to state 68
    AUTO     shift, and go to state 69
    BOOLEAN  shift, and go to state 70
    CHAR     shift, and go to state 71
    INTEGER  shift, and go to state 72
    STRING   shift, and go to state 73

    type_var_undefined_array  go to state 113


State 176

   65 expr_10: expr_9 QUESTION expr_10 COLON expr_10 .

    $default  reduce using rule 65 (expr_10)


State 177

  100 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set .

    $default  reduce using rule 100 (bracket_set)


State 178

   29 type_param: ARRAY OPEN_SQUARE . CLOSE_SQUARE type_param

    CLOSE_SQUARE  shift, and go to state 187


State 179

   21 param_list: . IDENTIFIER COLON type_param COMMA param_list
   21           | IDENTIFIER COLON type_param COMMA . param_list
   22           | . IDENTIFIER COLON type_param

    IDENTIFIER  shift, and go to state 101

    param_list  go to state 188


State 180

   53 matched_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 189


State 181

   49 condition: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 190


State 182

   55 open_if_stmt: IF condition if_stmt .

    $default  reduce using rule 55 (open_if_stmt)


State 183

   50 if_stmt: matched_if_stmt .  [FOR, IF, PRINT, RETURN, INTEGER_LITERAL, BOOLEAN_LITERAL, CHAR_LITERAL, STRING_LITERAL, IDENTIFIER, OPEN_PAREN, OPEN_CURLY, CLOSE_CURLY, MINUS, NOT]
   52 matched_if_stmt: IF condition matched_if_stmt . ELSE matched_if_stmt
   56 open_if_stmt: IF condition matched_if_stmt . ELSE open_if_stmt

    ELSE  shift, and go to state 191

    $default  reduce using rule 50 (if_stmt)


State 184

   45 other_stmt: PRINT expr_list_e SEMICOLON .

    $default  reduce using rule 45 (other_stmt)


State 185

   44 other_stmt: RETURN expr_or_e SEMICOLON .

    $default  reduce using rule 44 (other_stmt)


State 186

   46 other_stmt: OPEN_CURLY stmt_list_e CLOSE_CURLY .

    $default  reduce using rule 46 (other_stmt)


State 187

   23 type_param: . INTEGER
   24           | . BOOLEAN
   25           | . CHAR
   26           | . STRING
   27           | . AUTO
   28           | . FUNCTION
   29           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param
   29           | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_param

    ARRAY     shift, and go to state 154
    AUTO      shift, and go to state 155
    BOOLEAN   shift, and go to state 156
    CHAR      shift, and go to state 157
    FUNCTION  shift, and go to state 158
    INTEGER   shift, and go to state 159
    STRING    shift, and go to state 160

    type_param  go to state 192


State 188

   21 param_list: IDENTIFIER COLON type_param COMMA param_list .

    $default  reduce using rule 21 (param_list)


State 189

   53 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   58 expr_or_e: . expr_10
   59          | . %empty  [SEMICOLON]
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 59 (expr_or_e)

    expr_or_e        go to state 193
    expr_10          go to state 167
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 190

   49 condition: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 49 (condition)


State 191

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   44 other_stmt: . RETURN expr_or_e SEMICOLON
   45           | . PRINT expr_list_e SEMICOLON
   46           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   47           | . expr_10 SEMICOLON
   48           | . decl_var
   52 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   52                | IF condition matched_if_stmt ELSE . matched_if_stmt
   53                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   54                | . other_stmt
   55 open_if_stmt: . IF condition if_stmt
   56             | . IF condition matched_if_stmt ELSE open_if_stmt
   56             | IF condition matched_if_stmt ELSE . open_if_stmt
   57             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 135
    IF               shift, and go to state 136
    PRINT            shift, and go to state 137
    RETURN           shift, and go to state 138
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 139
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 140
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 141
    other_stmt       go to state 143
    matched_if_stmt  go to state 194
    open_if_stmt     go to state 195
    expr_10          go to state 148
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 192

   29 type_param: ARRAY OPEN_SQUARE CLOSE_SQUARE type_param .

    $default  reduce using rule 29 (type_param)


State 193

   53 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 196


State 194

   52 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt .

    $default  reduce using rule 52 (matched_if_stmt)


State 195

   56 open_if_stmt: IF condition matched_if_stmt ELSE open_if_stmt .

    $default  reduce using rule 56 (open_if_stmt)


State 196

   53 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN open_if_stmt
   58 expr_or_e: . expr_10
   59          | . %empty  [CLOSE_PAREN]
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 59 (expr_or_e)

    expr_or_e        go to state 197
    expr_10          go to state 167
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 197

   53 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN matched_if_stmt
   57 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN open_if_stmt

    CLOSE_PAREN  shift, and go to state 198


State 198

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   44 other_stmt: . RETURN expr_or_e SEMICOLON
   45           | . PRINT expr_list_e SEMICOLON
   46           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   47           | . expr_10 SEMICOLON
   48           | . decl_var
   52 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   53                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   53                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . matched_if_stmt
   54                | . other_stmt
   55 open_if_stmt: . IF condition if_stmt
   56             | . IF condition matched_if_stmt ELSE open_if_stmt
   57             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   57             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . open_if_stmt
   64 expr_10: . expr_9 EQUALS expr_10
   65        | . expr_9 QUESTION expr_10 COLON expr_10
   66        | . expr_9
   67 expr_9: . expr_9 OR expr_8
   68       | . expr_8
   69 expr_8: . expr_8 AND expr_7
   70       | . expr_7
   71 expr_7: . expr_7 LT expr_6
   72       | . expr_7 LE expr_6
   73       | . expr_7 EE expr_6
   74       | . expr_7 GE expr_6
   75       | . expr_7 GT expr_6
   76       | . expr_7 NE expr_6
   77       | . expr_6
   78 expr_6: . expr_6 PLUS expr_5
   79       | . expr_6 MINUS expr_5
   80       | . expr_5
   81 expr_5: . expr_5 MULTIPLY expr_4
   82       | . expr_5 DIVIDE expr_4
   83       | . expr_5 REMAINDER expr_4
   84       | . expr_4
   85 expr_4: . expr_3 EXP expr_4
   86       | . expr_3
   87 expr_3: . MINUS expr_3
   88       | . NOT expr_3
   89       | . expr_2
   90 expr_2: . expr_2 INCREMENT
   91       | . expr_2 DECREMENT
   92       | . expr_1
   93 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   94       | . func_call
   95       | . array_subscript
   96       | . atomic
   97 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   98 ident_name: . IDENTIFIER
   99 array_subscript: . ident_name bracket_set
  106 atomic: . INTEGER_LITERAL
  107       | . BOOLEAN_LITERAL
  108       | . CHAR_LITERAL
  109       | . STRING_LITERAL
  110       | . ident_name
  111       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 135
    IF               shift, and go to state 136
    PRINT            shift, and go to state 137
    RETURN           shift, and go to state 138
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 139
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 140
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 141
    other_stmt       go to state 143
    matched_if_stmt  go to state 199
    open_if_stmt     go to state 200
    expr_10          go to state 148
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 199

   53 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt .

    $default  reduce using rule 53 (matched_if_stmt)


State 200

   57 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt .

    $default  reduce using rule 57 (open_if_stmt)

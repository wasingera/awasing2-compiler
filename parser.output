Terminals unused in grammar

   TOKEN_EOF
   FALSE
   TRUE
   WHILE
   TOKEN_ERROR
   COMMENT


Grammar

    0 $accept: program $end

    1 program: decl_list
    2        | %empty

    3 decl_list: decl_var decl_list
    4          | decl_func decl_list
    5          | decl_var
    6          | decl_func

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON
    8         | IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON

    9 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

   11 type_func: INTEGER param_list_e
   12          | BOOLEAN param_list_e
   13          | CHAR param_list_e
   14          | STRING param_list_e
   15          | VOID param_list_e
   16          | AUTO param_list_e
   17          | FUNCTION type_func param_list_e

   18 param_list_e: OPEN_PAREN param_list CLOSE_PAREN
   19             | OPEN_PAREN CLOSE_PAREN

   20 param_list: IDENTIFIER COLON type_param COMMA param_list
   21           | IDENTIFIER COLON type_param

   22 type_param: INTEGER
   23           | BOOLEAN
   24           | CHAR
   25           | STRING
   26           | AUTO
   27           | FUNCTION
   28           | ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

   29 type_var: INTEGER
   30         | BOOLEAN
   31         | CHAR
   32         | STRING
   33         | AUTO
   34         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

   35 stmt: if_stmt

   36 other_stmt: RETURN expr_or_e SEMICOLON
   37           | PRINT expr_list_e SEMICOLON
   38           | OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | expr_10 SEMICOLON
   40           | decl_var

   41 condition: OPEN_PAREN expr_10 CLOSE_PAREN

   42 if_stmt: matched_if_stmt
   43        | open_if_stmt

   44 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt
   45                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | other_stmt

   47 open_if_stmt: IF condition if_stmt
   48             | IF condition matched_if_stmt ELSE open_if_stmt
   49             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

   50 expr_or_e: expr_10
   51          | %empty

   52 stmt_list_e: stmt_list
   53            | %empty

   54 stmt_list: stmt stmt_list
   55          | stmt

   56 expr_10: expr_9 EQUALS expr_10
   57        | expr_9 QUESTION expr_10 COLON expr_10
   58        | expr_9

   59 expr_9: expr_9 OR expr_8
   60       | expr_8

   61 expr_8: expr_8 AND expr_7
   62       | expr_7

   63 expr_7: expr_7 LT expr_6
   64       | expr_7 LE expr_6
   65       | expr_7 EE expr_6
   66       | expr_7 GE expr_6
   67       | expr_7 GT expr_6
   68       | expr_7 NE expr_6
   69       | expr_6

   70 expr_6: expr_6 PLUS expr_5
   71       | expr_6 MINUS expr_5
   72       | expr_5

   73 expr_5: expr_5 MULTIPLY expr_4
   74       | expr_5 DIVIDE expr_4
   75       | expr_5 REMAINDER expr_4
   76       | expr_4

   77 expr_4: expr_3 EXP expr_4
   78       | expr_3

   79 expr_3: MINUS expr_3
   80       | NOT expr_3
   81       | expr_2

   82 expr_2: expr_2 INCREMENT
   83       | expr_2 DECREMENT
   84       | expr_1

   85 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN
   86       | func_call
   87       | array_subscript
   88       | atomic

   89 func_call: ident_name OPEN_PAREN func_args_e CLOSE_PAREN

   90 func_args_e: func_args
   91            | %empty

   92 func_args: expr_10 COMMA func_args
   93          | expr_10

   94 ident_name: IDENTIFIER

   95 array_subscript: ident_name bracket_set

   96 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   97            | OPEN_SQUARE expr_10 CLOSE_SQUARE

   98 expr_list_e: expr_list
   99            | %empty

  100 expr_list: expr_10 COMMA expr_list
  101          | expr_10

  102 atomic: INTEGER_LITERAL
  103       | BOOLEAN_LITERAL
  104       | CHAR_LITERAL
  105       | STRING_LITERAL
  106       | ident_name
  107       | OPEN_CURLY expr_list CLOSE_CURLY


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259) 28 34
AUTO (260) 16 26 33
BOOLEAN (261) 12 23 30
CHAR (262) 13 24 31
ELSE (263) 44 48
FALSE (264)
FOR (265) 45 49
FUNCTION (266) 9 10 17 27
IF (267) 44 47 48
INTEGER (268) 11 22 29
PRINT (269) 37
RETURN (270) 36
STRING (271) 14 25 32
TRUE (272)
VOID (273) 15
WHILE (274)
INTEGER_LITERAL (275) 102
BOOLEAN_LITERAL (276) 103
CHAR_LITERAL (277) 104
STRING_LITERAL (278) 105
IDENTIFIER (279) 7 8 9 10 20 21 94
TOKEN_ERROR (280)
COMMENT (281)
SEMICOLON (282) 7 8 9 36 37 39 45 49
COLON (283) 7 8 9 10 20 21 57
QUESTION (284) 57
EQUALS (285) 8 10 56
GT (286) 67
GE (287) 66
LT (288) 63
LE (289) 64
EE (290) 65
NE (291) 68
AND (292) 61
OR (293) 59
INCREMENT (294) 82
DECREMENT (295) 83
OPEN_PAREN (296) 18 19 41 45 49 85 89
CLOSE_PAREN (297) 18 19 41 45 49 85 89
OPEN_SQUARE (298) 28 34 96 97
CLOSE_SQUARE (299) 28 34 96 97
OPEN_CURLY (300) 10 38 107
CLOSE_CURLY (301) 10 38 107
PLUS (302) 70
MINUS (303) 71 79
MULTIPLY (304) 73
DIVIDE (305) 74
REMAINDER (306) 75
EXP (307) 77
NOT (308) 80
COMMA (309) 20 92 100


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0
decl_list (57)
    on left: 3 4 5 6, on right: 1 3 4
decl_var (58)
    on left: 7 8, on right: 3 5 40
decl_func (59)
    on left: 9 10, on right: 4 6
type_func (60)
    on left: 11 12 13 14 15 16 17, on right: 9 10 17
param_list_e (61)
    on left: 18 19, on right: 11 12 13 14 15 16 17
param_list (62)
    on left: 20 21, on right: 18 20
type_param (63)
    on left: 22 23 24 25 26 27 28, on right: 20 21 28
type_var (64)
    on left: 29 30 31 32 33 34, on right: 7 8 34
stmt (65)
    on left: 35, on right: 54 55
other_stmt (66)
    on left: 36 37 38 39 40, on right: 46
condition (67)
    on left: 41, on right: 44 47 48
if_stmt (68)
    on left: 42 43, on right: 35 47
matched_if_stmt (69)
    on left: 44 45 46, on right: 42 44 45 48
open_if_stmt (70)
    on left: 47 48 49, on right: 43 48 49
expr_or_e (71)
    on left: 50 51, on right: 36 45 49
stmt_list_e (72)
    on left: 52 53, on right: 38
stmt_list (73)
    on left: 54 55, on right: 10 52 54
expr_10 (74)
    on left: 56 57 58, on right: 8 34 39 41 50 56 57 85 92 93 96 97
    100 101
expr_9 (75)
    on left: 59 60, on right: 56 57 58 59
expr_8 (76)
    on left: 61 62, on right: 59 60 61
expr_7 (77)
    on left: 63 64 65 66 67 68 69, on right: 61 62 63 64 65 66 67 68
expr_6 (78)
    on left: 70 71 72, on right: 63 64 65 66 67 68 69 70 71
expr_5 (79)
    on left: 73 74 75 76, on right: 70 71 72 73 74 75
expr_4 (80)
    on left: 77 78, on right: 73 74 75 76 77
expr_3 (81)
    on left: 79 80 81, on right: 77 78 79 80
expr_2 (82)
    on left: 82 83 84, on right: 81 82 83
expr_1 (83)
    on left: 85 86 87 88, on right: 84
func_call (84)
    on left: 89, on right: 86
func_args_e (85)
    on left: 90 91, on right: 89
func_args (86)
    on left: 92 93, on right: 90 92
ident_name (87)
    on left: 94, on right: 89 95 106
array_subscript (88)
    on left: 95, on right: 87
bracket_set (89)
    on left: 96 97, on right: 95 96
expr_list_e (90)
    on left: 98 99, on right: 37
expr_list (91)
    on left: 100 101, on right: 98 100 107
atomic (92)
    on left: 102 103 104 105 106 107, on right: 88


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2        | . %empty  [$end]
    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program    go to state 2
    decl_list  go to state 3
    decl_var   go to state 4
    decl_func  go to state 5


State 1

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER . COLON FUNCTION type_func SEMICOLON
   10          | IDENTIFIER . COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    COLON  shift, and go to state 6


State 2

    0 $accept: program . $end

    $end  shift, and go to state 7


State 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


State 4

    3 decl_list: . decl_var decl_list
    3          | decl_var . decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    5          | decl_var .  [$end]
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 5 (decl_list)

    decl_list  go to state 8
    decl_var   go to state 4
    decl_func  go to state 5


State 5

    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    4          | decl_func . decl_list
    5          | . decl_var
    6          | . decl_func
    6          | decl_func .  [$end]
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 6 (decl_list)

    decl_list  go to state 9
    decl_var   go to state 4
    decl_func  go to state 5


State 6

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER COLON . FUNCTION type_func SEMICOLON
   10          | IDENTIFIER COLON . FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    ARRAY     shift, and go to state 10
    AUTO      shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    CHAR      shift, and go to state 13
    FUNCTION  shift, and go to state 14
    INTEGER   shift, and go to state 15
    STRING    shift, and go to state 16

    type_var  go to state 17


State 7

    0 $accept: program $end .

    $default  accept


State 8

    3 decl_list: decl_var decl_list .

    $default  reduce using rule 3 (decl_list)


State 9

    4 decl_list: decl_func decl_list .

    $default  reduce using rule 4 (decl_list)


State 10

   34 type_var: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    OPEN_SQUARE  shift, and go to state 18


State 11

   33 type_var: AUTO .

    $default  reduce using rule 33 (type_var)


State 12

   30 type_var: BOOLEAN .

    $default  reduce using rule 30 (type_var)


State 13

   31 type_var: CHAR .

    $default  reduce using rule 31 (type_var)


State 14

    9 decl_func: IDENTIFIER COLON FUNCTION . type_func SEMICOLON
   10          | IDENTIFIER COLON FUNCTION . type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   11 type_func: . INTEGER param_list_e
   12          | . BOOLEAN param_list_e
   13          | . CHAR param_list_e
   14          | . STRING param_list_e
   15          | . VOID param_list_e
   16          | . AUTO param_list_e
   17          | . FUNCTION type_func param_list_e

    AUTO      shift, and go to state 19
    BOOLEAN   shift, and go to state 20
    CHAR      shift, and go to state 21
    FUNCTION  shift, and go to state 22
    INTEGER   shift, and go to state 23
    STRING    shift, and go to state 24
    VOID      shift, and go to state 25

    type_func  go to state 26


State 15

   29 type_var: INTEGER .

    $default  reduce using rule 29 (type_var)


State 16

   32 type_var: STRING .

    $default  reduce using rule 32 (type_var)


State 17

    7 decl_var: IDENTIFIER COLON type_var . SEMICOLON
    8         | IDENTIFIER COLON type_var . EQUALS expr_10 SEMICOLON

    SEMICOLON  shift, and go to state 27
    EQUALS     shift, and go to state 28


State 18

   34 type_var: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 38
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 19

   16 type_func: AUTO . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 53


State 20

   12 type_func: BOOLEAN . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 54


State 21

   13 type_func: CHAR . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 55


State 22

   11 type_func: . INTEGER param_list_e
   12          | . BOOLEAN param_list_e
   13          | . CHAR param_list_e
   14          | . STRING param_list_e
   15          | . VOID param_list_e
   16          | . AUTO param_list_e
   17          | . FUNCTION type_func param_list_e
   17          | FUNCTION . type_func param_list_e

    AUTO      shift, and go to state 19
    BOOLEAN   shift, and go to state 20
    CHAR      shift, and go to state 21
    FUNCTION  shift, and go to state 22
    INTEGER   shift, and go to state 23
    STRING    shift, and go to state 24
    VOID      shift, and go to state 25

    type_func  go to state 56


State 23

   11 type_func: INTEGER . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 57


State 24

   14 type_func: STRING . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 58


State 25

   15 type_func: VOID . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 59


State 26

    9 decl_func: IDENTIFIER COLON FUNCTION type_func . SEMICOLON
   10          | IDENTIFIER COLON FUNCTION type_func . EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    SEMICOLON  shift, and go to state 60
    EQUALS     shift, and go to state 61


State 27

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON .

    $default  reduce using rule 7 (decl_var)


State 28

    8 decl_var: IDENTIFIER COLON type_var EQUALS . expr_10 SEMICOLON
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 62
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 29

  102 atomic: INTEGER_LITERAL .

    $default  reduce using rule 102 (atomic)


State 30

  103 atomic: BOOLEAN_LITERAL .

    $default  reduce using rule 103 (atomic)


State 31

  104 atomic: CHAR_LITERAL .

    $default  reduce using rule 104 (atomic)


State 32

  105 atomic: STRING_LITERAL .

    $default  reduce using rule 105 (atomic)


State 33

   94 ident_name: IDENTIFIER .

    $default  reduce using rule 94 (ident_name)


State 34

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   85       | OPEN_PAREN . expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 63
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 35

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  100 expr_list: . expr_10 COMMA expr_list
  101          | . expr_10
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY
  107       | OPEN_CURLY . expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 64
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    expr_list        go to state 65
    atomic           go to state 51


State 36

   79 expr_3: . MINUS expr_3
   79       | MINUS . expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_3           go to state 66
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 37

   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   80       | NOT . expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_3           go to state 67
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 38

   34 type_var: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var

    CLOSE_SQUARE  shift, and go to state 68


State 39

   56 expr_10: expr_9 . EQUALS expr_10
   57        | expr_9 . QUESTION expr_10 COLON expr_10
   58        | expr_9 .  [SEMICOLON, COLON, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   59 expr_9: expr_9 . OR expr_8

    QUESTION  shift, and go to state 69
    EQUALS    shift, and go to state 70
    OR        shift, and go to state 71

    $default  reduce using rule 58 (expr_10)


State 40

   60 expr_9: expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   61 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 72

    $default  reduce using rule 60 (expr_9)


State 41

   62 expr_8: expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   63 expr_7: expr_7 . LT expr_6
   64       | expr_7 . LE expr_6
   65       | expr_7 . EE expr_6
   66       | expr_7 . GE expr_6
   67       | expr_7 . GT expr_6
   68       | expr_7 . NE expr_6

    GT  shift, and go to state 73
    GE  shift, and go to state 74
    LT  shift, and go to state 75
    LE  shift, and go to state 76
    EE  shift, and go to state 77
    NE  shift, and go to state 78

    $default  reduce using rule 62 (expr_8)


State 42

   69 expr_7: expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 69 (expr_7)


State 43

   72 expr_6: expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   73 expr_5: expr_5 . MULTIPLY expr_4
   74       | expr_5 . DIVIDE expr_4
   75       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 81
    DIVIDE     shift, and go to state 82
    REMAINDER  shift, and go to state 83

    $default  reduce using rule 72 (expr_6)


State 44

   76 expr_5: expr_4 .

    $default  reduce using rule 76 (expr_5)


State 45

   77 expr_4: expr_3 . EXP expr_4
   78       | expr_3 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, COMMA]

    EXP  shift, and go to state 84

    $default  reduce using rule 78 (expr_4)


State 46

   81 expr_3: expr_2 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]
   82 expr_2: expr_2 . INCREMENT
   83       | expr_2 . DECREMENT

    INCREMENT  shift, and go to state 85
    DECREMENT  shift, and go to state 86

    $default  reduce using rule 81 (expr_3)


State 47

   84 expr_2: expr_1 .

    $default  reduce using rule 84 (expr_2)


State 48

   86 expr_1: func_call .

    $default  reduce using rule 86 (expr_1)


State 49

   89 func_call: ident_name . OPEN_PAREN func_args_e CLOSE_PAREN
   95 array_subscript: ident_name . bracket_set
   96 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   97            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  106 atomic: ident_name .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_PAREN   shift, and go to state 87
    OPEN_SQUARE  shift, and go to state 88

    $default  reduce using rule 106 (atomic)

    bracket_set  go to state 89


State 50

   87 expr_1: array_subscript .

    $default  reduce using rule 87 (expr_1)


State 51

   88 expr_1: atomic .

    $default  reduce using rule 88 (expr_1)


State 52

   18 param_list_e: OPEN_PAREN . param_list CLOSE_PAREN
   19             | OPEN_PAREN . CLOSE_PAREN
   20 param_list: . IDENTIFIER COLON type_param COMMA param_list
   21           | . IDENTIFIER COLON type_param

    IDENTIFIER   shift, and go to state 90
    CLOSE_PAREN  shift, and go to state 91

    param_list  go to state 92


State 53

   16 type_func: AUTO param_list_e .

    $default  reduce using rule 16 (type_func)


State 54

   12 type_func: BOOLEAN param_list_e .

    $default  reduce using rule 12 (type_func)


State 55

   13 type_func: CHAR param_list_e .

    $default  reduce using rule 13 (type_func)


State 56

   17 type_func: FUNCTION type_func . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 52

    param_list_e  go to state 93


State 57

   11 type_func: INTEGER param_list_e .

    $default  reduce using rule 11 (type_func)


State 58

   14 type_func: STRING param_list_e .

    $default  reduce using rule 14 (type_func)


State 59

   15 type_func: VOID param_list_e .

    $default  reduce using rule 15 (type_func)


State 60

    9 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON .

    $default  reduce using rule 9 (decl_func)


State 61

   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS . OPEN_CURLY stmt_list CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 94


State 62

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 95


State 63

   85 expr_1: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 96


State 64

  100 expr_list: expr_10 . COMMA expr_list
  101          | expr_10 .  [SEMICOLON, CLOSE_CURLY]

    COMMA  shift, and go to state 97

    $default  reduce using rule 101 (expr_list)


State 65

  107 atomic: OPEN_CURLY expr_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 98


State 66

   79 expr_3: MINUS expr_3 .

    $default  reduce using rule 79 (expr_3)


State 67

   80 expr_3: NOT expr_3 .

    $default  reduce using rule 80 (expr_3)


State 68

   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   34         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 99


State 69

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   57        | expr_9 QUESTION . expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 100
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 70

   56 expr_10: . expr_9 EQUALS expr_10
   56        | expr_9 EQUALS . expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 101
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 71

   59 expr_9: expr_9 OR . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_8           go to state 102
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 72

   61 expr_8: expr_8 AND . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_7           go to state 103
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 73

   67 expr_7: expr_7 GT . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_6           go to state 104
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 74

   66 expr_7: expr_7 GE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_6           go to state 105
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 75

   63 expr_7: expr_7 LT . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_6           go to state 106
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 76

   64 expr_7: expr_7 LE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_6           go to state 107
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 77

   65 expr_7: expr_7 EE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_6           go to state 108
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 78

   68 expr_7: expr_7 NE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_6           go to state 109
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 79

   70 expr_6: expr_6 PLUS . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_5           go to state 110
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 80

   71 expr_6: expr_6 MINUS . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_5           go to state 111
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 81

   73 expr_5: expr_5 MULTIPLY . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_4           go to state 112
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 82

   74 expr_5: expr_5 DIVIDE . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_4           go to state 113
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 83

   75 expr_5: expr_5 REMAINDER . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_4           go to state 114
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 84

   77 expr_4: . expr_3 EXP expr_4
   77       | expr_3 EXP . expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_4           go to state 115
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 85

   82 expr_2: expr_2 INCREMENT .

    $default  reduce using rule 82 (expr_2)


State 86

   83 expr_2: expr_2 DECREMENT .

    $default  reduce using rule 83 (expr_2)


State 87

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   89          | ident_name OPEN_PAREN . func_args_e CLOSE_PAREN
   90 func_args_e: . func_args
   91            | . %empty  [CLOSE_PAREN]
   92 func_args: . expr_10 COMMA func_args
   93          | . expr_10
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 91 (func_args_e)

    expr_10          go to state 116
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    func_args_e      go to state 117
    func_args        go to state 118
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 88

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
   96 bracket_set: OPEN_SQUARE . expr_10 CLOSE_SQUARE bracket_set
   97            | OPEN_SQUARE . expr_10 CLOSE_SQUARE
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 119
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 89

   95 array_subscript: ident_name bracket_set .

    $default  reduce using rule 95 (array_subscript)


State 90

   20 param_list: IDENTIFIER . COLON type_param COMMA param_list
   21           | IDENTIFIER . COLON type_param

    COLON  shift, and go to state 120


State 91

   19 param_list_e: OPEN_PAREN CLOSE_PAREN .

    $default  reduce using rule 19 (param_list_e)


State 92

   18 param_list_e: OPEN_PAREN param_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 121


State 93

   17 type_func: FUNCTION type_func param_list_e .

    $default  reduce using rule 17 (type_func)


State 94

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY . stmt_list CLOSE_CURLY
   35 stmt: . if_stmt
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   54 stmt_list: . stmt stmt_list
   55          | . stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 122
    IF               shift, and go to state 123
    PRINT            shift, and go to state 124
    RETURN           shift, and go to state 125
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 126
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 127
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    decl_var         go to state 128
    stmt             go to state 129
    other_stmt       go to state 130
    if_stmt          go to state 131
    matched_if_stmt  go to state 132
    open_if_stmt     go to state 133
    stmt_list        go to state 134
    expr_10          go to state 135
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 95

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 8 (decl_var)


State 96

   85 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 85 (expr_1)


State 97

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  100 expr_list: . expr_10 COMMA expr_list
  100          | expr_10 COMMA . expr_list
  101          | . expr_10
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 64
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    expr_list        go to state 136
    atomic           go to state 51


State 98

  107 atomic: OPEN_CURLY expr_list CLOSE_CURLY .

    $default  reduce using rule 107 (atomic)


State 99

   34 type_var: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var .

    $default  reduce using rule 34 (type_var)


State 100

   57 expr_10: expr_9 QUESTION expr_10 . COLON expr_10

    COLON  shift, and go to state 137


State 101

   56 expr_10: expr_9 EQUALS expr_10 .

    $default  reduce using rule 56 (expr_10)


State 102

   59 expr_9: expr_9 OR expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   61 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 72

    $default  reduce using rule 59 (expr_9)


State 103

   61 expr_8: expr_8 AND expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   63 expr_7: expr_7 . LT expr_6
   64       | expr_7 . LE expr_6
   65       | expr_7 . EE expr_6
   66       | expr_7 . GE expr_6
   67       | expr_7 . GT expr_6
   68       | expr_7 . NE expr_6

    GT  shift, and go to state 73
    GE  shift, and go to state 74
    LT  shift, and go to state 75
    LE  shift, and go to state 76
    EE  shift, and go to state 77
    NE  shift, and go to state 78

    $default  reduce using rule 61 (expr_8)


State 104

   67 expr_7: expr_7 GT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 67 (expr_7)


State 105

   66 expr_7: expr_7 GE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 66 (expr_7)


State 106

   63 expr_7: expr_7 LT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 63 (expr_7)


State 107

   64 expr_7: expr_7 LE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 64 (expr_7)


State 108

   65 expr_7: expr_7 EE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 65 (expr_7)


State 109

   68 expr_7: expr_7 NE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 68 (expr_7)


State 110

   70 expr_6: expr_6 PLUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   73 expr_5: expr_5 . MULTIPLY expr_4
   74       | expr_5 . DIVIDE expr_4
   75       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 81
    DIVIDE     shift, and go to state 82
    REMAINDER  shift, and go to state 83

    $default  reduce using rule 70 (expr_6)


State 111

   71 expr_6: expr_6 MINUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   73 expr_5: expr_5 . MULTIPLY expr_4
   74       | expr_5 . DIVIDE expr_4
   75       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 81
    DIVIDE     shift, and go to state 82
    REMAINDER  shift, and go to state 83

    $default  reduce using rule 71 (expr_6)


State 112

   73 expr_5: expr_5 MULTIPLY expr_4 .

    $default  reduce using rule 73 (expr_5)


State 113

   74 expr_5: expr_5 DIVIDE expr_4 .

    $default  reduce using rule 74 (expr_5)


State 114

   75 expr_5: expr_5 REMAINDER expr_4 .

    $default  reduce using rule 75 (expr_5)


State 115

   77 expr_4: expr_3 EXP expr_4 .

    $default  reduce using rule 77 (expr_4)


State 116

   92 func_args: expr_10 . COMMA func_args
   93          | expr_10 .  [CLOSE_PAREN]

    COMMA  shift, and go to state 138

    $default  reduce using rule 93 (func_args)


State 117

   89 func_call: ident_name OPEN_PAREN func_args_e . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 139


State 118

   90 func_args_e: func_args .

    $default  reduce using rule 90 (func_args_e)


State 119

   96 bracket_set: OPEN_SQUARE expr_10 . CLOSE_SQUARE bracket_set
   97            | OPEN_SQUARE expr_10 . CLOSE_SQUARE

    CLOSE_SQUARE  shift, and go to state 140


State 120

   20 param_list: IDENTIFIER COLON . type_param COMMA param_list
   21           | IDENTIFIER COLON . type_param
   22 type_param: . INTEGER
   23           | . BOOLEAN
   24           | . CHAR
   25           | . STRING
   26           | . AUTO
   27           | . FUNCTION
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

    ARRAY     shift, and go to state 141
    AUTO      shift, and go to state 142
    BOOLEAN   shift, and go to state 143
    CHAR      shift, and go to state 144
    FUNCTION  shift, and go to state 145
    INTEGER   shift, and go to state 146
    STRING    shift, and go to state 147

    type_param  go to state 148


State 121

   18 param_list_e: OPEN_PAREN param_list CLOSE_PAREN .

    $default  reduce using rule 18 (param_list_e)


State 122

   45 matched_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    OPEN_PAREN  shift, and go to state 149


State 123

   41 condition: . OPEN_PAREN expr_10 CLOSE_PAREN
   44 matched_if_stmt: IF . condition matched_if_stmt ELSE matched_if_stmt
   47 open_if_stmt: IF . condition if_stmt
   48             | IF . condition matched_if_stmt ELSE open_if_stmt

    OPEN_PAREN  shift, and go to state 150

    condition  go to state 151


State 124

   37 other_stmt: PRINT . expr_list_e SEMICOLON
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
   98 expr_list_e: . expr_list
   99            | . %empty  [SEMICOLON]
  100 expr_list: . expr_10 COMMA expr_list
  101          | . expr_10
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 99 (expr_list_e)

    expr_10          go to state 64
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    expr_list_e      go to state 152
    expr_list        go to state 153
    atomic           go to state 51


State 125

   36 other_stmt: RETURN . expr_or_e SEMICOLON
   50 expr_or_e: . expr_10
   51          | . %empty  [SEMICOLON]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 154
    expr_10          go to state 155
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 126

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
   94 ident_name: IDENTIFIER .  [SEMICOLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, OPEN_PAREN, OPEN_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    COLON  shift, and go to state 156

    $default  reduce using rule 94 (ident_name)


State 127

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   35 stmt: . if_stmt
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   38           | OPEN_CURLY . stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   52 stmt_list_e: . stmt_list
   53            | . %empty  [CLOSE_CURLY]
   54 stmt_list: . stmt stmt_list
   55          | . stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  100 expr_list: . expr_10 COMMA expr_list
  101          | . expr_10
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY
  107       | OPEN_CURLY . expr_list CLOSE_CURLY

    FOR              shift, and go to state 122
    IF               shift, and go to state 123
    PRINT            shift, and go to state 124
    RETURN           shift, and go to state 125
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 126
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 127
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 53 (stmt_list_e)

    decl_var         go to state 128
    stmt             go to state 129
    other_stmt       go to state 130
    if_stmt          go to state 131
    matched_if_stmt  go to state 132
    open_if_stmt     go to state 133
    stmt_list_e      go to state 157
    stmt_list        go to state 158
    expr_10          go to state 159
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    expr_list        go to state 65
    atomic           go to state 51


State 128

   40 other_stmt: decl_var .

    $default  reduce using rule 40 (other_stmt)


State 129

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   35 stmt: . if_stmt
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   54 stmt_list: . stmt stmt_list
   54          | stmt . stmt_list
   55          | . stmt
   55          | stmt .  [CLOSE_CURLY]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 122
    IF               shift, and go to state 123
    PRINT            shift, and go to state 124
    RETURN           shift, and go to state 125
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 126
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 127
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 55 (stmt_list)

    decl_var         go to state 128
    stmt             go to state 129
    other_stmt       go to state 130
    if_stmt          go to state 131
    matched_if_stmt  go to state 132
    open_if_stmt     go to state 133
    stmt_list        go to state 160
    expr_10          go to state 135
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 130

   46 matched_if_stmt: other_stmt .

    $default  reduce using rule 46 (matched_if_stmt)


State 131

   35 stmt: if_stmt .

    $default  reduce using rule 35 (stmt)


State 132

   42 if_stmt: matched_if_stmt .

    $default  reduce using rule 42 (if_stmt)


State 133

   43 if_stmt: open_if_stmt .

    $default  reduce using rule 43 (if_stmt)


State 134

   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 161


State 135

   39 other_stmt: expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 162


State 136

  100 expr_list: expr_10 COMMA expr_list .

    $default  reduce using rule 100 (expr_list)


State 137

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   57        | expr_9 QUESTION expr_10 COLON . expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 163
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 138

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   92 func_args: . expr_10 COMMA func_args
   92          | expr_10 COMMA . func_args
   93          | . expr_10
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 116
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    func_args        go to state 164
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 139

   89 func_call: ident_name OPEN_PAREN func_args_e CLOSE_PAREN .

    $default  reduce using rule 89 (func_call)


State 140

   96 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   96            | OPEN_SQUARE expr_10 CLOSE_SQUARE . bracket_set
   97            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
   97            | OPEN_SQUARE expr_10 CLOSE_SQUARE .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_SQUARE  shift, and go to state 88

    $default  reduce using rule 97 (bracket_set)

    bracket_set  go to state 165


State 141

   28 type_param: ARRAY . OPEN_SQUARE CLOSE_SQUARE type_param

    OPEN_SQUARE  shift, and go to state 166


State 142

   26 type_param: AUTO .

    $default  reduce using rule 26 (type_param)


State 143

   23 type_param: BOOLEAN .

    $default  reduce using rule 23 (type_param)


State 144

   24 type_param: CHAR .

    $default  reduce using rule 24 (type_param)


State 145

   27 type_param: FUNCTION .

    $default  reduce using rule 27 (type_param)


State 146

   22 type_param: INTEGER .

    $default  reduce using rule 22 (type_param)


State 147

   25 type_param: STRING .

    $default  reduce using rule 25 (type_param)


State 148

   20 param_list: IDENTIFIER COLON type_param . COMMA param_list
   21           | IDENTIFIER COLON type_param .  [CLOSE_PAREN]

    COMMA  shift, and go to state 167

    $default  reduce using rule 21 (param_list)


State 149

   45 matched_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   50 expr_or_e: . expr_10
   51          | . %empty  [SEMICOLON]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 168
    expr_10          go to state 155
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 150

   41 condition: OPEN_PAREN . expr_10 CLOSE_PAREN
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    expr_10          go to state 169
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 151

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   44                | IF condition . matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   47             | IF condition . if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   48             | IF condition . matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 122
    IF               shift, and go to state 123
    PRINT            shift, and go to state 124
    RETURN           shift, and go to state 125
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 126
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 127
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    decl_var         go to state 128
    other_stmt       go to state 130
    if_stmt          go to state 170
    matched_if_stmt  go to state 171
    open_if_stmt     go to state 133
    expr_10          go to state 135
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 152

   37 other_stmt: PRINT expr_list_e . SEMICOLON

    SEMICOLON  shift, and go to state 172


State 153

   98 expr_list_e: expr_list .

    $default  reduce using rule 98 (expr_list_e)


State 154

   36 other_stmt: RETURN expr_or_e . SEMICOLON

    SEMICOLON  shift, and go to state 173


State 155

   50 expr_or_e: expr_10 .

    $default  reduce using rule 50 (expr_or_e)


State 156

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 17


State 157

   38 other_stmt: OPEN_CURLY stmt_list_e . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 174


State 158

   52 stmt_list_e: stmt_list .

    $default  reduce using rule 52 (stmt_list_e)


State 159

   39 other_stmt: expr_10 . SEMICOLON
  100 expr_list: expr_10 . COMMA expr_list
  101          | expr_10 .  [CLOSE_CURLY]

    SEMICOLON  shift, and go to state 162
    COMMA      shift, and go to state 97

    $default  reduce using rule 101 (expr_list)


State 160

   54 stmt_list: stmt stmt_list .

    $default  reduce using rule 54 (stmt_list)


State 161

   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY .

    $default  reduce using rule 10 (decl_func)


State 162

   39 other_stmt: expr_10 SEMICOLON .

    $default  reduce using rule 39 (other_stmt)


State 163

   57 expr_10: expr_9 QUESTION expr_10 COLON expr_10 .

    $default  reduce using rule 57 (expr_10)


State 164

   92 func_args: expr_10 COMMA func_args .

    $default  reduce using rule 92 (func_args)


State 165

   96 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set .

    $default  reduce using rule 96 (bracket_set)


State 166

   28 type_param: ARRAY OPEN_SQUARE . CLOSE_SQUARE type_param

    CLOSE_SQUARE  shift, and go to state 175


State 167

   20 param_list: . IDENTIFIER COLON type_param COMMA param_list
   20           | IDENTIFIER COLON type_param COMMA . param_list
   21           | . IDENTIFIER COLON type_param

    IDENTIFIER  shift, and go to state 90

    param_list  go to state 176


State 168

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 177


State 169

   41 condition: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 178


State 170

   47 open_if_stmt: IF condition if_stmt .

    $default  reduce using rule 47 (open_if_stmt)


State 171

   42 if_stmt: matched_if_stmt .  [FOR, IF, PRINT, RETURN, INTEGER_LITERAL, BOOLEAN_LITERAL, CHAR_LITERAL, STRING_LITERAL, IDENTIFIER, OPEN_PAREN, OPEN_CURLY, CLOSE_CURLY, MINUS, NOT]
   44 matched_if_stmt: IF condition matched_if_stmt . ELSE matched_if_stmt
   48 open_if_stmt: IF condition matched_if_stmt . ELSE open_if_stmt

    ELSE  shift, and go to state 179

    $default  reduce using rule 42 (if_stmt)


State 172

   37 other_stmt: PRINT expr_list_e SEMICOLON .

    $default  reduce using rule 37 (other_stmt)


State 173

   36 other_stmt: RETURN expr_or_e SEMICOLON .

    $default  reduce using rule 36 (other_stmt)


State 174

   38 other_stmt: OPEN_CURLY stmt_list_e CLOSE_CURLY .

    $default  reduce using rule 38 (other_stmt)


State 175

   22 type_param: . INTEGER
   23           | . BOOLEAN
   24           | . CHAR
   25           | . STRING
   26           | . AUTO
   27           | . FUNCTION
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param
   28           | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_param

    ARRAY     shift, and go to state 141
    AUTO      shift, and go to state 142
    BOOLEAN   shift, and go to state 143
    CHAR      shift, and go to state 144
    FUNCTION  shift, and go to state 145
    INTEGER   shift, and go to state 146
    STRING    shift, and go to state 147

    type_param  go to state 180


State 176

   20 param_list: IDENTIFIER COLON type_param COMMA param_list .

    $default  reduce using rule 20 (param_list)


State 177

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   50 expr_or_e: . expr_10
   51          | . %empty  [SEMICOLON]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 181
    expr_10          go to state 155
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 178

   41 condition: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 41 (condition)


State 179

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   44                | IF condition matched_if_stmt ELSE . matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   48             | IF condition matched_if_stmt ELSE . open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 122
    IF               shift, and go to state 123
    PRINT            shift, and go to state 124
    RETURN           shift, and go to state 125
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 126
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 127
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    decl_var         go to state 128
    other_stmt       go to state 130
    matched_if_stmt  go to state 182
    open_if_stmt     go to state 183
    expr_10          go to state 135
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 180

   28 type_param: ARRAY OPEN_SQUARE CLOSE_SQUARE type_param .

    $default  reduce using rule 28 (type_param)


State 181

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 184


State 182

   44 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt .

    $default  reduce using rule 44 (matched_if_stmt)


State 183

   48 open_if_stmt: IF condition matched_if_stmt ELSE open_if_stmt .

    $default  reduce using rule 48 (open_if_stmt)


State 184

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN open_if_stmt
   50 expr_or_e: . expr_10
   51          | . %empty  [CLOSE_PAREN]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 35
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 185
    expr_10          go to state 155
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 185

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN open_if_stmt

    CLOSE_PAREN  shift, and go to state 186


State 186

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   45                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   49             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . open_if_stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . ident_name OPEN_PAREN func_args_e CLOSE_PAREN
   94 ident_name: . IDENTIFIER
   95 array_subscript: . ident_name bracket_set
  102 atomic: . INTEGER_LITERAL
  103       | . BOOLEAN_LITERAL
  104       | . CHAR_LITERAL
  105       | . STRING_LITERAL
  106       | . ident_name
  107       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 122
    IF               shift, and go to state 123
    PRINT            shift, and go to state 124
    RETURN           shift, and go to state 125
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 126
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 127
    MINUS            shift, and go to state 36
    NOT              shift, and go to state 37

    decl_var         go to state 128
    other_stmt       go to state 130
    matched_if_stmt  go to state 187
    open_if_stmt     go to state 188
    expr_10          go to state 135
    expr_9           go to state 39
    expr_8           go to state 40
    expr_7           go to state 41
    expr_6           go to state 42
    expr_5           go to state 43
    expr_4           go to state 44
    expr_3           go to state 45
    expr_2           go to state 46
    expr_1           go to state 47
    func_call        go to state 48
    ident_name       go to state 49
    array_subscript  go to state 50
    atomic           go to state 51


State 187

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt .

    $default  reduce using rule 45 (matched_if_stmt)


State 188

   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt .

    $default  reduce using rule 49 (open_if_stmt)

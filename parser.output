Terminals unused in grammar

   TOKEN_EOF
   FALSE
   TRUE
   WHILE
   TOKEN_ERROR
   COMMENT


Grammar

    0 $accept: program $end

    1 program: decl_list
    2        | %empty

    3 decl_list: decl_var decl_list
    4          | decl_func decl_list
    5          | decl_var
    6          | decl_func

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON
    8         | IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON

   10 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

   12 type_func: INTEGER param_list_e
   13          | BOOLEAN param_list_e
   14          | CHAR param_list_e
   15          | STRING param_list_e
   16          | VOID param_list_e
   17          | AUTO param_list_e
   18          | FUNCTION type_func param_list_e

   19 param_list_e: OPEN_PAREN param_list CLOSE_PAREN
   20             | OPEN_PAREN CLOSE_PAREN

   21 param_list: IDENTIFIER COLON type_param COMMA param_list
   22           | IDENTIFIER COLON type_param

   23 type_param: INTEGER
   24           | BOOLEAN
   25           | CHAR
   26           | STRING
   27           | AUTO
   28           | FUNCTION
   29           | ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

   30 type_var: INTEGER
   31         | BOOLEAN
   32         | CHAR
   33         | STRING
   34         | AUTO
   35         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

   36 type_var_undefined_array: ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

   37 stmt: if_stmt

   38 other_stmt: RETURN expr_or_e SEMICOLON
   39           | PRINT expr_list_e SEMICOLON
   40           | OPEN_CURLY stmt_list_e CLOSE_CURLY
   41           | expr_10 SEMICOLON
   42           | decl_var

   43 condition: OPEN_PAREN expr_10 CLOSE_PAREN

   44 if_stmt: matched_if_stmt
   45        | open_if_stmt

   46 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt
   47                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   48                | other_stmt

   49 open_if_stmt: IF condition if_stmt
   50             | IF condition matched_if_stmt ELSE open_if_stmt
   51             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

   52 expr_or_e: expr_10
   53          | %empty

   54 stmt_list_e: stmt_list
   55            | %empty

   56 stmt_list: stmt stmt_list
   57          | stmt

   58 expr_10: expr_9 EQUALS expr_10
   59        | expr_9 QUESTION expr_10 COLON expr_10
   60        | expr_9

   61 expr_9: expr_9 OR expr_8
   62       | expr_8

   63 expr_8: expr_8 AND expr_7
   64       | expr_7

   65 expr_7: expr_7 LT expr_6
   66       | expr_7 LE expr_6
   67       | expr_7 EE expr_6
   68       | expr_7 GE expr_6
   69       | expr_7 GT expr_6
   70       | expr_7 NE expr_6
   71       | expr_6

   72 expr_6: expr_6 PLUS expr_5
   73       | expr_6 MINUS expr_5
   74       | expr_5

   75 expr_5: expr_5 MULTIPLY expr_4
   76       | expr_5 DIVIDE expr_4
   77       | expr_5 REMAINDER expr_4
   78       | expr_4

   79 expr_4: expr_3 EXP expr_4
   80       | expr_3

   81 expr_3: MINUS expr_3
   82       | NOT expr_3
   83       | expr_2

   84 expr_2: expr_2 INCREMENT
   85       | expr_2 DECREMENT
   86       | expr_1

   87 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN
   88       | func_call
   89       | array_subscript
   90       | atomic

   91 func_call: ident_name OPEN_PAREN expr_list_e CLOSE_PAREN

   92 ident_name: IDENTIFIER

   93 array_subscript: ident_name bracket_set

   94 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   95            | OPEN_SQUARE expr_10 CLOSE_SQUARE

   96 expr_list_e: expr_list
   97            | %empty

   98 expr_list: expr_10 COMMA expr_list
   99          | expr_10

  100 atomic: INTEGER_LITERAL
  101       | BOOLEAN_LITERAL
  102       | CHAR_LITERAL
  103       | STRING_LITERAL
  104       | ident_name
  105       | OPEN_CURLY expr_list CLOSE_CURLY


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259) 29 35 36
AUTO (260) 17 27 34
BOOLEAN (261) 13 24 31
CHAR (262) 14 25 32
ELSE (263) 46 50
FALSE (264)
FOR (265) 47 51
FUNCTION (266) 10 11 18 28
IF (267) 46 49 50
INTEGER (268) 12 23 30
PRINT (269) 39
RETURN (270) 38
STRING (271) 15 26 33
TRUE (272)
VOID (273) 16
WHILE (274)
INTEGER_LITERAL (275) 100
BOOLEAN_LITERAL (276) 101
CHAR_LITERAL (277) 102
STRING_LITERAL (278) 103
IDENTIFIER (279) 7 8 9 10 11 21 22 92
TOKEN_ERROR (280)
COMMENT (281)
SEMICOLON (282) 7 8 9 10 38 39 41 47 51
COLON (283) 7 8 9 10 11 21 22 59
QUESTION (284) 59
EQUALS (285) 8 9 11 58
GT (286) 69
GE (287) 68
LT (288) 65
LE (289) 66
EE (290) 67
NE (291) 70
AND (292) 63
OR (293) 61
INCREMENT (294) 84
DECREMENT (295) 85
OPEN_PAREN (296) 19 20 43 47 51 87 91
CLOSE_PAREN (297) 19 20 43 47 51 87 91
OPEN_SQUARE (298) 29 35 36 94 95
CLOSE_SQUARE (299) 29 35 36 94 95
OPEN_CURLY (300) 11 40 105
CLOSE_CURLY (301) 11 40 105
PLUS (302) 72
MINUS (303) 73 81
MULTIPLY (304) 75
DIVIDE (305) 76
REMAINDER (306) 77
EXP (307) 79
NOT (308) 82
COMMA (309) 21 98


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0
decl_list (57)
    on left: 3 4 5 6, on right: 1 3 4
decl_var (58)
    on left: 7 8 9, on right: 3 5 42
decl_func (59)
    on left: 10 11, on right: 4 6
type_func (60)
    on left: 12 13 14 15 16 17 18, on right: 10 11 18
param_list_e (61)
    on left: 19 20, on right: 12 13 14 15 16 17 18
param_list (62)
    on left: 21 22, on right: 19 21
type_param (63)
    on left: 23 24 25 26 27 28 29, on right: 21 22 29
type_var (64)
    on left: 30 31 32 33 34 35, on right: 7 8 35 36
type_var_undefined_array (65)
    on left: 36, on right: 9
stmt (66)
    on left: 37, on right: 56 57
other_stmt (67)
    on left: 38 39 40 41 42, on right: 48
condition (68)
    on left: 43, on right: 46 49 50
if_stmt (69)
    on left: 44 45, on right: 37 49
matched_if_stmt (70)
    on left: 46 47 48, on right: 44 46 47 50
open_if_stmt (71)
    on left: 49 50 51, on right: 45 50 51
expr_or_e (72)
    on left: 52 53, on right: 38 47 51
stmt_list_e (73)
    on left: 54 55, on right: 40
stmt_list (74)
    on left: 56 57, on right: 11 54 56
expr_10 (75)
    on left: 58 59 60, on right: 8 9 35 41 43 52 58 59 87 94 95 98
    99
expr_9 (76)
    on left: 61 62, on right: 58 59 60 61
expr_8 (77)
    on left: 63 64, on right: 61 62 63
expr_7 (78)
    on left: 65 66 67 68 69 70 71, on right: 63 64 65 66 67 68 69 70
expr_6 (79)
    on left: 72 73 74, on right: 65 66 67 68 69 70 71 72 73
expr_5 (80)
    on left: 75 76 77 78, on right: 72 73 74 75 76 77
expr_4 (81)
    on left: 79 80, on right: 75 76 77 78 79
expr_3 (82)
    on left: 81 82 83, on right: 79 80 81 82
expr_2 (83)
    on left: 84 85 86, on right: 83 84 85
expr_1 (84)
    on left: 87 88 89 90, on right: 86
func_call (85)
    on left: 91, on right: 88
ident_name (86)
    on left: 92, on right: 91 93 104
array_subscript (87)
    on left: 93, on right: 89
bracket_set (88)
    on left: 94 95, on right: 93 94
expr_list_e (89)
    on left: 96 97, on right: 39 91
expr_list (90)
    on left: 98 99, on right: 96 98 105
atomic (91)
    on left: 100 101 102 103 104 105, on right: 90


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2        | . %empty  [$end]
    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program    go to state 2
    decl_list  go to state 3
    decl_var   go to state 4
    decl_func  go to state 5


State 1

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER . COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: IDENTIFIER . COLON FUNCTION type_func SEMICOLON
   11          | IDENTIFIER . COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    COLON  shift, and go to state 6


State 2

    0 $accept: program . $end

    $end  shift, and go to state 7


State 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


State 4

    3 decl_list: . decl_var decl_list
    3          | decl_var . decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    5          | decl_var .  [$end]
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 5 (decl_list)

    decl_list  go to state 8
    decl_var   go to state 4
    decl_func  go to state 5


State 5

    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    4          | decl_func . decl_list
    5          | . decl_var
    6          | . decl_func
    6          | decl_func .  [$end]
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   11          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 6 (decl_list)

    decl_list  go to state 9
    decl_var   go to state 4
    decl_func  go to state 5


State 6

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER COLON . type_var_undefined_array EQUALS expr_10 SEMICOLON
   10 decl_func: IDENTIFIER COLON . FUNCTION type_func SEMICOLON
   11          | IDENTIFIER COLON . FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

    ARRAY     shift, and go to state 10
    AUTO      shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    CHAR      shift, and go to state 13
    FUNCTION  shift, and go to state 14
    INTEGER   shift, and go to state 15
    STRING    shift, and go to state 16

    type_var                  go to state 17
    type_var_undefined_array  go to state 18


State 7

    0 $accept: program $end .

    $default  accept


State 8

    3 decl_list: decl_var decl_list .

    $default  reduce using rule 3 (decl_list)


State 9

    4 decl_list: decl_func decl_list .

    $default  reduce using rule 4 (decl_list)


State 10

   35 type_var: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: ARRAY . OPEN_SQUARE CLOSE_SQUARE type_var

    OPEN_SQUARE  shift, and go to state 19


State 11

   34 type_var: AUTO .

    $default  reduce using rule 34 (type_var)


State 12

   31 type_var: BOOLEAN .

    $default  reduce using rule 31 (type_var)


State 13

   32 type_var: CHAR .

    $default  reduce using rule 32 (type_var)


State 14

   10 decl_func: IDENTIFIER COLON FUNCTION . type_func SEMICOLON
   11          | IDENTIFIER COLON FUNCTION . type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   12 type_func: . INTEGER param_list_e
   13          | . BOOLEAN param_list_e
   14          | . CHAR param_list_e
   15          | . STRING param_list_e
   16          | . VOID param_list_e
   17          | . AUTO param_list_e
   18          | . FUNCTION type_func param_list_e

    AUTO      shift, and go to state 20
    BOOLEAN   shift, and go to state 21
    CHAR      shift, and go to state 22
    FUNCTION  shift, and go to state 23
    INTEGER   shift, and go to state 24
    STRING    shift, and go to state 25
    VOID      shift, and go to state 26

    type_func  go to state 27


State 15

   30 type_var: INTEGER .

    $default  reduce using rule 30 (type_var)


State 16

   33 type_var: STRING .

    $default  reduce using rule 33 (type_var)


State 17

    7 decl_var: IDENTIFIER COLON type_var . SEMICOLON
    8         | IDENTIFIER COLON type_var . EQUALS expr_10 SEMICOLON

    SEMICOLON  shift, and go to state 28
    EQUALS     shift, and go to state 29


State 18

    9 decl_var: IDENTIFIER COLON type_var_undefined_array . EQUALS expr_10 SEMICOLON

    EQUALS  shift, and go to state 30


State 19

   35 type_var: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: ARRAY OPEN_SQUARE . CLOSE_SQUARE type_var
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    CLOSE_SQUARE     shift, and go to state 37
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 41
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 20

   17 type_func: AUTO . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 56


State 21

   13 type_func: BOOLEAN . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 57


State 22

   14 type_func: CHAR . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 58


State 23

   12 type_func: . INTEGER param_list_e
   13          | . BOOLEAN param_list_e
   14          | . CHAR param_list_e
   15          | . STRING param_list_e
   16          | . VOID param_list_e
   17          | . AUTO param_list_e
   18          | . FUNCTION type_func param_list_e
   18          | FUNCTION . type_func param_list_e

    AUTO      shift, and go to state 20
    BOOLEAN   shift, and go to state 21
    CHAR      shift, and go to state 22
    FUNCTION  shift, and go to state 23
    INTEGER   shift, and go to state 24
    STRING    shift, and go to state 25
    VOID      shift, and go to state 26

    type_func  go to state 59


State 24

   12 type_func: INTEGER . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 60


State 25

   15 type_func: STRING . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 61


State 26

   16 type_func: VOID . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 62


State 27

   10 decl_func: IDENTIFIER COLON FUNCTION type_func . SEMICOLON
   11          | IDENTIFIER COLON FUNCTION type_func . EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    SEMICOLON  shift, and go to state 63
    EQUALS     shift, and go to state 64


State 28

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON .

    $default  reduce using rule 7 (decl_var)


State 29

    8 decl_var: IDENTIFIER COLON type_var EQUALS . expr_10 SEMICOLON
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 65
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 30

    9 decl_var: IDENTIFIER COLON type_var_undefined_array EQUALS . expr_10 SEMICOLON
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 66
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 31

  100 atomic: INTEGER_LITERAL .

    $default  reduce using rule 100 (atomic)


State 32

  101 atomic: BOOLEAN_LITERAL .

    $default  reduce using rule 101 (atomic)


State 33

  102 atomic: CHAR_LITERAL .

    $default  reduce using rule 102 (atomic)


State 34

  103 atomic: STRING_LITERAL .

    $default  reduce using rule 103 (atomic)


State 35

   92 ident_name: IDENTIFIER .

    $default  reduce using rule 92 (ident_name)


State 36

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | OPEN_PAREN . expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 67
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 37

   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: ARRAY OPEN_SQUARE CLOSE_SQUARE . type_var

    ARRAY    shift, and go to state 68
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 69


State 38

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
   98 expr_list: . expr_10 COMMA expr_list
   99          | . expr_10
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY
  105       | OPEN_CURLY . expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 70
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list        go to state 71
    atomic           go to state 54


State 39

   81 expr_3: . MINUS expr_3
   81       | MINUS . expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_3           go to state 72
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 40

   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   82       | NOT . expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_3           go to state 73
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 41

   35 type_var: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var

    CLOSE_SQUARE  shift, and go to state 74


State 42

   58 expr_10: expr_9 . EQUALS expr_10
   59        | expr_9 . QUESTION expr_10 COLON expr_10
   60        | expr_9 .  [SEMICOLON, COLON, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   61 expr_9: expr_9 . OR expr_8

    QUESTION  shift, and go to state 75
    EQUALS    shift, and go to state 76
    OR        shift, and go to state 77

    $default  reduce using rule 60 (expr_10)


State 43

   62 expr_9: expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   63 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 78

    $default  reduce using rule 62 (expr_9)


State 44

   64 expr_8: expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   65 expr_7: expr_7 . LT expr_6
   66       | expr_7 . LE expr_6
   67       | expr_7 . EE expr_6
   68       | expr_7 . GE expr_6
   69       | expr_7 . GT expr_6
   70       | expr_7 . NE expr_6

    GT  shift, and go to state 79
    GE  shift, and go to state 80
    LT  shift, and go to state 81
    LE  shift, and go to state 82
    EE  shift, and go to state 83
    NE  shift, and go to state 84

    $default  reduce using rule 64 (expr_8)


State 45

   71 expr_7: expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 71 (expr_7)


State 46

   74 expr_6: expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   75 expr_5: expr_5 . MULTIPLY expr_4
   76       | expr_5 . DIVIDE expr_4
   77       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 87
    DIVIDE     shift, and go to state 88
    REMAINDER  shift, and go to state 89

    $default  reduce using rule 74 (expr_6)


State 47

   78 expr_5: expr_4 .

    $default  reduce using rule 78 (expr_5)


State 48

   79 expr_4: expr_3 . EXP expr_4
   80       | expr_3 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, COMMA]

    EXP  shift, and go to state 90

    $default  reduce using rule 80 (expr_4)


State 49

   83 expr_3: expr_2 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]
   84 expr_2: expr_2 . INCREMENT
   85       | expr_2 . DECREMENT

    INCREMENT  shift, and go to state 91
    DECREMENT  shift, and go to state 92

    $default  reduce using rule 83 (expr_3)


State 50

   86 expr_2: expr_1 .

    $default  reduce using rule 86 (expr_2)


State 51

   88 expr_1: func_call .

    $default  reduce using rule 88 (expr_1)


State 52

   91 func_call: ident_name . OPEN_PAREN expr_list_e CLOSE_PAREN
   93 array_subscript: ident_name . bracket_set
   94 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   95            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  104 atomic: ident_name .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_PAREN   shift, and go to state 93
    OPEN_SQUARE  shift, and go to state 94

    $default  reduce using rule 104 (atomic)

    bracket_set  go to state 95


State 53

   89 expr_1: array_subscript .

    $default  reduce using rule 89 (expr_1)


State 54

   90 expr_1: atomic .

    $default  reduce using rule 90 (expr_1)


State 55

   19 param_list_e: OPEN_PAREN . param_list CLOSE_PAREN
   20             | OPEN_PAREN . CLOSE_PAREN
   21 param_list: . IDENTIFIER COLON type_param COMMA param_list
   22           | . IDENTIFIER COLON type_param

    IDENTIFIER   shift, and go to state 96
    CLOSE_PAREN  shift, and go to state 97

    param_list  go to state 98


State 56

   17 type_func: AUTO param_list_e .

    $default  reduce using rule 17 (type_func)


State 57

   13 type_func: BOOLEAN param_list_e .

    $default  reduce using rule 13 (type_func)


State 58

   14 type_func: CHAR param_list_e .

    $default  reduce using rule 14 (type_func)


State 59

   18 type_func: FUNCTION type_func . param_list_e
   19 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   20             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 55

    param_list_e  go to state 99


State 60

   12 type_func: INTEGER param_list_e .

    $default  reduce using rule 12 (type_func)


State 61

   15 type_func: STRING param_list_e .

    $default  reduce using rule 15 (type_func)


State 62

   16 type_func: VOID param_list_e .

    $default  reduce using rule 16 (type_func)


State 63

   10 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON .

    $default  reduce using rule 10 (decl_func)


State 64

   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS . OPEN_CURLY stmt_list CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 100


State 65

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 101


State 66

    9 decl_var: IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 102


State 67

   87 expr_1: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 103


State 68

   35 type_var: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    OPEN_SQUARE  shift, and go to state 104


State 69

   36 type_var_undefined_array: ARRAY OPEN_SQUARE CLOSE_SQUARE type_var .

    $default  reduce using rule 36 (type_var_undefined_array)


State 70

   98 expr_list: expr_10 . COMMA expr_list
   99          | expr_10 .  [SEMICOLON, CLOSE_PAREN, CLOSE_CURLY]

    COMMA  shift, and go to state 105

    $default  reduce using rule 99 (expr_list)


State 71

  105 atomic: OPEN_CURLY expr_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 106


State 72

   81 expr_3: MINUS expr_3 .

    $default  reduce using rule 81 (expr_3)


State 73

   82 expr_3: NOT expr_3 .

    $default  reduce using rule 82 (expr_3)


State 74

   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var

    ARRAY    shift, and go to state 68
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 107


State 75

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | expr_9 QUESTION . expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 108
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 76

   58 expr_10: . expr_9 EQUALS expr_10
   58        | expr_9 EQUALS . expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 109
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 77

   61 expr_9: expr_9 OR . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_8           go to state 110
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 78

   63 expr_8: expr_8 AND . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_7           go to state 111
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 79

   69 expr_7: expr_7 GT . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 112
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 80

   68 expr_7: expr_7 GE . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 113
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 81

   65 expr_7: expr_7 LT . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 114
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 82

   66 expr_7: expr_7 LE . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 115
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 83

   67 expr_7: expr_7 EE . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 116
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 84

   70 expr_7: expr_7 NE . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_6           go to state 117
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 85

   72 expr_6: expr_6 PLUS . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_5           go to state 118
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 86

   73 expr_6: expr_6 MINUS . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_5           go to state 119
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 87

   75 expr_5: expr_5 MULTIPLY . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 120
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 88

   76 expr_5: expr_5 DIVIDE . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 121
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 89

   77 expr_5: expr_5 REMAINDER . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 122
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 90

   79 expr_4: . expr_3 EXP expr_4
   79       | expr_3 EXP . expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_4           go to state 123
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 91

   84 expr_2: expr_2 INCREMENT .

    $default  reduce using rule 84 (expr_2)


State 92

   85 expr_2: expr_2 DECREMENT .

    $default  reduce using rule 85 (expr_2)


State 93

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91          | ident_name OPEN_PAREN . expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
   96 expr_list_e: . expr_list
   97            | . %empty  [CLOSE_PAREN]
   98 expr_list: . expr_10 COMMA expr_list
   99          | . expr_10
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 97 (expr_list_e)

    expr_10          go to state 70
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list_e      go to state 124
    expr_list        go to state 125
    atomic           go to state 54


State 94

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
   94 bracket_set: OPEN_SQUARE . expr_10 CLOSE_SQUARE bracket_set
   95            | OPEN_SQUARE . expr_10 CLOSE_SQUARE
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 126
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 95

   93 array_subscript: ident_name bracket_set .

    $default  reduce using rule 93 (array_subscript)


State 96

   21 param_list: IDENTIFIER . COLON type_param COMMA param_list
   22           | IDENTIFIER . COLON type_param

    COLON  shift, and go to state 127


State 97

   20 param_list_e: OPEN_PAREN CLOSE_PAREN .

    $default  reduce using rule 20 (param_list_e)


State 98

   19 param_list_e: OPEN_PAREN param_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 128


State 99

   18 type_func: FUNCTION type_func param_list_e .

    $default  reduce using rule 18 (type_func)


State 100

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY . stmt_list CLOSE_CURLY
   37 stmt: . if_stmt
   38 other_stmt: . RETURN expr_or_e SEMICOLON
   39           | . PRINT expr_list_e SEMICOLON
   40           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   41           | . expr_10 SEMICOLON
   42           | . decl_var
   44 if_stmt: . matched_if_stmt
   45        | . open_if_stmt
   46 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   47                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   48                | . other_stmt
   49 open_if_stmt: . IF condition if_stmt
   50             | . IF condition matched_if_stmt ELSE open_if_stmt
   51             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   56 stmt_list: . stmt stmt_list
   57          | . stmt
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 129
    IF               shift, and go to state 130
    PRINT            shift, and go to state 131
    RETURN           shift, and go to state 132
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 133
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 134
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 135
    stmt             go to state 136
    other_stmt       go to state 137
    if_stmt          go to state 138
    matched_if_stmt  go to state 139
    open_if_stmt     go to state 140
    stmt_list        go to state 141
    expr_10          go to state 142
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 101

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 8 (decl_var)


State 102

    9 decl_var: IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 9 (decl_var)


State 103

   87 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 87 (expr_1)


State 104

   35 type_var: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 41
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 105

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
   98 expr_list: . expr_10 COMMA expr_list
   98          | expr_10 COMMA . expr_list
   99          | . expr_10
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 70
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list        go to state 143
    atomic           go to state 54


State 106

  105 atomic: OPEN_CURLY expr_list CLOSE_CURLY .

    $default  reduce using rule 105 (atomic)


State 107

   35 type_var: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var .

    $default  reduce using rule 35 (type_var)


State 108

   59 expr_10: expr_9 QUESTION expr_10 . COLON expr_10

    COLON  shift, and go to state 144


State 109

   58 expr_10: expr_9 EQUALS expr_10 .

    $default  reduce using rule 58 (expr_10)


State 110

   61 expr_9: expr_9 OR expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   63 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 78

    $default  reduce using rule 61 (expr_9)


State 111

   63 expr_8: expr_8 AND expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   65 expr_7: expr_7 . LT expr_6
   66       | expr_7 . LE expr_6
   67       | expr_7 . EE expr_6
   68       | expr_7 . GE expr_6
   69       | expr_7 . GT expr_6
   70       | expr_7 . NE expr_6

    GT  shift, and go to state 79
    GE  shift, and go to state 80
    LT  shift, and go to state 81
    LE  shift, and go to state 82
    EE  shift, and go to state 83
    NE  shift, and go to state 84

    $default  reduce using rule 63 (expr_8)


State 112

   69 expr_7: expr_7 GT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 69 (expr_7)


State 113

   68 expr_7: expr_7 GE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 68 (expr_7)


State 114

   65 expr_7: expr_7 LT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 65 (expr_7)


State 115

   66 expr_7: expr_7 LE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 66 (expr_7)


State 116

   67 expr_7: expr_7 EE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 67 (expr_7)


State 117

   70 expr_7: expr_7 NE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   72 expr_6: expr_6 . PLUS expr_5
   73       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86

    $default  reduce using rule 70 (expr_7)


State 118

   72 expr_6: expr_6 PLUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   75 expr_5: expr_5 . MULTIPLY expr_4
   76       | expr_5 . DIVIDE expr_4
   77       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 87
    DIVIDE     shift, and go to state 88
    REMAINDER  shift, and go to state 89

    $default  reduce using rule 72 (expr_6)


State 119

   73 expr_6: expr_6 MINUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   75 expr_5: expr_5 . MULTIPLY expr_4
   76       | expr_5 . DIVIDE expr_4
   77       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 87
    DIVIDE     shift, and go to state 88
    REMAINDER  shift, and go to state 89

    $default  reduce using rule 73 (expr_6)


State 120

   75 expr_5: expr_5 MULTIPLY expr_4 .

    $default  reduce using rule 75 (expr_5)


State 121

   76 expr_5: expr_5 DIVIDE expr_4 .

    $default  reduce using rule 76 (expr_5)


State 122

   77 expr_5: expr_5 REMAINDER expr_4 .

    $default  reduce using rule 77 (expr_5)


State 123

   79 expr_4: expr_3 EXP expr_4 .

    $default  reduce using rule 79 (expr_4)


State 124

   91 func_call: ident_name OPEN_PAREN expr_list_e . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 145


State 125

   96 expr_list_e: expr_list .

    $default  reduce using rule 96 (expr_list_e)


State 126

   94 bracket_set: OPEN_SQUARE expr_10 . CLOSE_SQUARE bracket_set
   95            | OPEN_SQUARE expr_10 . CLOSE_SQUARE

    CLOSE_SQUARE  shift, and go to state 146


State 127

   21 param_list: IDENTIFIER COLON . type_param COMMA param_list
   22           | IDENTIFIER COLON . type_param
   23 type_param: . INTEGER
   24           | . BOOLEAN
   25           | . CHAR
   26           | . STRING
   27           | . AUTO
   28           | . FUNCTION
   29           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

    ARRAY     shift, and go to state 147
    AUTO      shift, and go to state 148
    BOOLEAN   shift, and go to state 149
    CHAR      shift, and go to state 150
    FUNCTION  shift, and go to state 151
    INTEGER   shift, and go to state 152
    STRING    shift, and go to state 153

    type_param  go to state 154


State 128

   19 param_list_e: OPEN_PAREN param_list CLOSE_PAREN .

    $default  reduce using rule 19 (param_list_e)


State 129

   47 matched_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    OPEN_PAREN  shift, and go to state 155


State 130

   43 condition: . OPEN_PAREN expr_10 CLOSE_PAREN
   46 matched_if_stmt: IF . condition matched_if_stmt ELSE matched_if_stmt
   49 open_if_stmt: IF . condition if_stmt
   50             | IF . condition matched_if_stmt ELSE open_if_stmt

    OPEN_PAREN  shift, and go to state 156

    condition  go to state 157


State 131

   39 other_stmt: PRINT . expr_list_e SEMICOLON
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
   96 expr_list_e: . expr_list
   97            | . %empty  [SEMICOLON]
   98 expr_list: . expr_10 COMMA expr_list
   99          | . expr_10
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 97 (expr_list_e)

    expr_10          go to state 70
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list_e      go to state 158
    expr_list        go to state 125
    atomic           go to state 54


State 132

   38 other_stmt: RETURN . expr_or_e SEMICOLON
   52 expr_or_e: . expr_10
   53          | . %empty  [SEMICOLON]
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 53 (expr_or_e)

    expr_or_e        go to state 159
    expr_10          go to state 160
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 133

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER . COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   92 ident_name: IDENTIFIER .  [SEMICOLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, OPEN_PAREN, OPEN_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    COLON  shift, and go to state 161

    $default  reduce using rule 92 (ident_name)


State 134

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   37 stmt: . if_stmt
   38 other_stmt: . RETURN expr_or_e SEMICOLON
   39           | . PRINT expr_list_e SEMICOLON
   40           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | OPEN_CURLY . stmt_list_e CLOSE_CURLY
   41           | . expr_10 SEMICOLON
   42           | . decl_var
   44 if_stmt: . matched_if_stmt
   45        | . open_if_stmt
   46 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   47                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   48                | . other_stmt
   49 open_if_stmt: . IF condition if_stmt
   50             | . IF condition matched_if_stmt ELSE open_if_stmt
   51             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   54 stmt_list_e: . stmt_list
   55            | . %empty  [CLOSE_CURLY]
   56 stmt_list: . stmt stmt_list
   57          | . stmt
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
   98 expr_list: . expr_10 COMMA expr_list
   99          | . expr_10
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY
  105       | OPEN_CURLY . expr_list CLOSE_CURLY

    FOR              shift, and go to state 129
    IF               shift, and go to state 130
    PRINT            shift, and go to state 131
    RETURN           shift, and go to state 132
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 133
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 134
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 55 (stmt_list_e)

    decl_var         go to state 135
    stmt             go to state 136
    other_stmt       go to state 137
    if_stmt          go to state 138
    matched_if_stmt  go to state 139
    open_if_stmt     go to state 140
    stmt_list_e      go to state 162
    stmt_list        go to state 163
    expr_10          go to state 164
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    expr_list        go to state 71
    atomic           go to state 54


State 135

   42 other_stmt: decl_var .

    $default  reduce using rule 42 (other_stmt)


State 136

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   37 stmt: . if_stmt
   38 other_stmt: . RETURN expr_or_e SEMICOLON
   39           | . PRINT expr_list_e SEMICOLON
   40           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   41           | . expr_10 SEMICOLON
   42           | . decl_var
   44 if_stmt: . matched_if_stmt
   45        | . open_if_stmt
   46 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   47                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   48                | . other_stmt
   49 open_if_stmt: . IF condition if_stmt
   50             | . IF condition matched_if_stmt ELSE open_if_stmt
   51             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   56 stmt_list: . stmt stmt_list
   56          | stmt . stmt_list
   57          | . stmt
   57          | stmt .  [CLOSE_CURLY]
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 129
    IF               shift, and go to state 130
    PRINT            shift, and go to state 131
    RETURN           shift, and go to state 132
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 133
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 134
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 57 (stmt_list)

    decl_var         go to state 135
    stmt             go to state 136
    other_stmt       go to state 137
    if_stmt          go to state 138
    matched_if_stmt  go to state 139
    open_if_stmt     go to state 140
    stmt_list        go to state 165
    expr_10          go to state 142
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 137

   48 matched_if_stmt: other_stmt .

    $default  reduce using rule 48 (matched_if_stmt)


State 138

   37 stmt: if_stmt .

    $default  reduce using rule 37 (stmt)


State 139

   44 if_stmt: matched_if_stmt .

    $default  reduce using rule 44 (if_stmt)


State 140

   45 if_stmt: open_if_stmt .

    $default  reduce using rule 45 (if_stmt)


State 141

   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 166


State 142

   41 other_stmt: expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 167


State 143

   98 expr_list: expr_10 COMMA expr_list .

    $default  reduce using rule 98 (expr_list)


State 144

   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | expr_9 QUESTION expr_10 COLON . expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 168
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 145

   91 func_call: ident_name OPEN_PAREN expr_list_e CLOSE_PAREN .

    $default  reduce using rule 91 (func_call)


State 146

   94 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   94            | OPEN_SQUARE expr_10 CLOSE_SQUARE . bracket_set
   95            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
   95            | OPEN_SQUARE expr_10 CLOSE_SQUARE .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_SQUARE  shift, and go to state 94

    $default  reduce using rule 95 (bracket_set)

    bracket_set  go to state 169


State 147

   29 type_param: ARRAY . OPEN_SQUARE CLOSE_SQUARE type_param

    OPEN_SQUARE  shift, and go to state 170


State 148

   27 type_param: AUTO .

    $default  reduce using rule 27 (type_param)


State 149

   24 type_param: BOOLEAN .

    $default  reduce using rule 24 (type_param)


State 150

   25 type_param: CHAR .

    $default  reduce using rule 25 (type_param)


State 151

   28 type_param: FUNCTION .

    $default  reduce using rule 28 (type_param)


State 152

   23 type_param: INTEGER .

    $default  reduce using rule 23 (type_param)


State 153

   26 type_param: STRING .

    $default  reduce using rule 26 (type_param)


State 154

   21 param_list: IDENTIFIER COLON type_param . COMMA param_list
   22           | IDENTIFIER COLON type_param .  [CLOSE_PAREN]

    COMMA  shift, and go to state 171

    $default  reduce using rule 22 (param_list)


State 155

   47 matched_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   52 expr_or_e: . expr_10
   53          | . %empty  [SEMICOLON]
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 53 (expr_or_e)

    expr_or_e        go to state 172
    expr_10          go to state 160
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 156

   43 condition: OPEN_PAREN . expr_10 CLOSE_PAREN
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    expr_10          go to state 173
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 157

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   38 other_stmt: . RETURN expr_or_e SEMICOLON
   39           | . PRINT expr_list_e SEMICOLON
   40           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   41           | . expr_10 SEMICOLON
   42           | . decl_var
   44 if_stmt: . matched_if_stmt
   45        | . open_if_stmt
   46 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   46                | IF condition . matched_if_stmt ELSE matched_if_stmt
   47                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   48                | . other_stmt
   49 open_if_stmt: . IF condition if_stmt
   49             | IF condition . if_stmt
   50             | . IF condition matched_if_stmt ELSE open_if_stmt
   50             | IF condition . matched_if_stmt ELSE open_if_stmt
   51             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 129
    IF               shift, and go to state 130
    PRINT            shift, and go to state 131
    RETURN           shift, and go to state 132
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 133
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 134
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 135
    other_stmt       go to state 137
    if_stmt          go to state 174
    matched_if_stmt  go to state 175
    open_if_stmt     go to state 140
    expr_10          go to state 142
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 158

   39 other_stmt: PRINT expr_list_e . SEMICOLON

    SEMICOLON  shift, and go to state 176


State 159

   38 other_stmt: RETURN expr_or_e . SEMICOLON

    SEMICOLON  shift, and go to state 177


State 160

   52 expr_or_e: expr_10 .

    $default  reduce using rule 52 (expr_or_e)


State 161

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9         | IDENTIFIER COLON . type_var_undefined_array EQUALS expr_10 SEMICOLON
   30 type_var: . INTEGER
   31         | . BOOLEAN
   32         | . CHAR
   33         | . STRING
   34         | . AUTO
   35         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   36 type_var_undefined_array: . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var                  go to state 17
    type_var_undefined_array  go to state 18


State 162

   40 other_stmt: OPEN_CURLY stmt_list_e . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 178


State 163

   54 stmt_list_e: stmt_list .

    $default  reduce using rule 54 (stmt_list_e)


State 164

   41 other_stmt: expr_10 . SEMICOLON
   98 expr_list: expr_10 . COMMA expr_list
   99          | expr_10 .  [CLOSE_CURLY]

    SEMICOLON  shift, and go to state 167
    COMMA      shift, and go to state 105

    $default  reduce using rule 99 (expr_list)


State 165

   56 stmt_list: stmt stmt_list .

    $default  reduce using rule 56 (stmt_list)


State 166

   11 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY .

    $default  reduce using rule 11 (decl_func)


State 167

   41 other_stmt: expr_10 SEMICOLON .

    $default  reduce using rule 41 (other_stmt)


State 168

   59 expr_10: expr_9 QUESTION expr_10 COLON expr_10 .

    $default  reduce using rule 59 (expr_10)


State 169

   94 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set .

    $default  reduce using rule 94 (bracket_set)


State 170

   29 type_param: ARRAY OPEN_SQUARE . CLOSE_SQUARE type_param

    CLOSE_SQUARE  shift, and go to state 179


State 171

   21 param_list: . IDENTIFIER COLON type_param COMMA param_list
   21           | IDENTIFIER COLON type_param COMMA . param_list
   22           | . IDENTIFIER COLON type_param

    IDENTIFIER  shift, and go to state 96

    param_list  go to state 180


State 172

   47 matched_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 181


State 173

   43 condition: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 182


State 174

   49 open_if_stmt: IF condition if_stmt .

    $default  reduce using rule 49 (open_if_stmt)


State 175

   44 if_stmt: matched_if_stmt .  [FOR, IF, PRINT, RETURN, INTEGER_LITERAL, BOOLEAN_LITERAL, CHAR_LITERAL, STRING_LITERAL, IDENTIFIER, OPEN_PAREN, OPEN_CURLY, CLOSE_CURLY, MINUS, NOT]
   46 matched_if_stmt: IF condition matched_if_stmt . ELSE matched_if_stmt
   50 open_if_stmt: IF condition matched_if_stmt . ELSE open_if_stmt

    ELSE  shift, and go to state 183

    $default  reduce using rule 44 (if_stmt)


State 176

   39 other_stmt: PRINT expr_list_e SEMICOLON .

    $default  reduce using rule 39 (other_stmt)


State 177

   38 other_stmt: RETURN expr_or_e SEMICOLON .

    $default  reduce using rule 38 (other_stmt)


State 178

   40 other_stmt: OPEN_CURLY stmt_list_e CLOSE_CURLY .

    $default  reduce using rule 40 (other_stmt)


State 179

   23 type_param: . INTEGER
   24           | . BOOLEAN
   25           | . CHAR
   26           | . STRING
   27           | . AUTO
   28           | . FUNCTION
   29           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param
   29           | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_param

    ARRAY     shift, and go to state 147
    AUTO      shift, and go to state 148
    BOOLEAN   shift, and go to state 149
    CHAR      shift, and go to state 150
    FUNCTION  shift, and go to state 151
    INTEGER   shift, and go to state 152
    STRING    shift, and go to state 153

    type_param  go to state 184


State 180

   21 param_list: IDENTIFIER COLON type_param COMMA param_list .

    $default  reduce using rule 21 (param_list)


State 181

   47 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   52 expr_or_e: . expr_10
   53          | . %empty  [SEMICOLON]
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 53 (expr_or_e)

    expr_or_e        go to state 185
    expr_10          go to state 160
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 182

   43 condition: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 43 (condition)


State 183

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   38 other_stmt: . RETURN expr_or_e SEMICOLON
   39           | . PRINT expr_list_e SEMICOLON
   40           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   41           | . expr_10 SEMICOLON
   42           | . decl_var
   46 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   46                | IF condition matched_if_stmt ELSE . matched_if_stmt
   47                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   48                | . other_stmt
   49 open_if_stmt: . IF condition if_stmt
   50             | . IF condition matched_if_stmt ELSE open_if_stmt
   50             | IF condition matched_if_stmt ELSE . open_if_stmt
   51             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 129
    IF               shift, and go to state 130
    PRINT            shift, and go to state 131
    RETURN           shift, and go to state 132
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 133
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 134
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 135
    other_stmt       go to state 137
    matched_if_stmt  go to state 186
    open_if_stmt     go to state 187
    expr_10          go to state 142
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 184

   29 type_param: ARRAY OPEN_SQUARE CLOSE_SQUARE type_param .

    $default  reduce using rule 29 (type_param)


State 185

   47 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 188


State 186

   46 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt .

    $default  reduce using rule 46 (matched_if_stmt)


State 187

   50 open_if_stmt: IF condition matched_if_stmt ELSE open_if_stmt .

    $default  reduce using rule 50 (open_if_stmt)


State 188

   47 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN open_if_stmt
   52 expr_or_e: . expr_10
   53          | . %empty  [CLOSE_PAREN]
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 35
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 38
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    $default  reduce using rule 53 (expr_or_e)

    expr_or_e        go to state 189
    expr_10          go to state 160
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 189

   47 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN matched_if_stmt
   51 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN open_if_stmt

    CLOSE_PAREN  shift, and go to state 190


State 190

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9         | . IDENTIFIER COLON type_var_undefined_array EQUALS expr_10 SEMICOLON
   38 other_stmt: . RETURN expr_or_e SEMICOLON
   39           | . PRINT expr_list_e SEMICOLON
   40           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   41           | . expr_10 SEMICOLON
   42           | . decl_var
   46 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   47                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . matched_if_stmt
   48                | . other_stmt
   49 open_if_stmt: . IF condition if_stmt
   50             | . IF condition matched_if_stmt ELSE open_if_stmt
   51             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   51             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . open_if_stmt
   58 expr_10: . expr_9 EQUALS expr_10
   59        | . expr_9 QUESTION expr_10 COLON expr_10
   60        | . expr_9
   61 expr_9: . expr_9 OR expr_8
   62       | . expr_8
   63 expr_8: . expr_8 AND expr_7
   64       | . expr_7
   65 expr_7: . expr_7 LT expr_6
   66       | . expr_7 LE expr_6
   67       | . expr_7 EE expr_6
   68       | . expr_7 GE expr_6
   69       | . expr_7 GT expr_6
   70       | . expr_7 NE expr_6
   71       | . expr_6
   72 expr_6: . expr_6 PLUS expr_5
   73       | . expr_6 MINUS expr_5
   74       | . expr_5
   75 expr_5: . expr_5 MULTIPLY expr_4
   76       | . expr_5 DIVIDE expr_4
   77       | . expr_5 REMAINDER expr_4
   78       | . expr_4
   79 expr_4: . expr_3 EXP expr_4
   80       | . expr_3
   81 expr_3: . MINUS expr_3
   82       | . NOT expr_3
   83       | . expr_2
   84 expr_2: . expr_2 INCREMENT
   85       | . expr_2 DECREMENT
   86       | . expr_1
   87 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   88       | . func_call
   89       | . array_subscript
   90       | . atomic
   91 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   92 ident_name: . IDENTIFIER
   93 array_subscript: . ident_name bracket_set
  100 atomic: . INTEGER_LITERAL
  101       | . BOOLEAN_LITERAL
  102       | . CHAR_LITERAL
  103       | . STRING_LITERAL
  104       | . ident_name
  105       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 129
    IF               shift, and go to state 130
    PRINT            shift, and go to state 131
    RETURN           shift, and go to state 132
    INTEGER_LITERAL  shift, and go to state 31
    BOOLEAN_LITERAL  shift, and go to state 32
    CHAR_LITERAL     shift, and go to state 33
    STRING_LITERAL   shift, and go to state 34
    IDENTIFIER       shift, and go to state 133
    OPEN_PAREN       shift, and go to state 36
    OPEN_CURLY       shift, and go to state 134
    MINUS            shift, and go to state 39
    NOT              shift, and go to state 40

    decl_var         go to state 135
    other_stmt       go to state 137
    matched_if_stmt  go to state 191
    open_if_stmt     go to state 192
    expr_10          go to state 142
    expr_9           go to state 42
    expr_8           go to state 43
    expr_7           go to state 44
    expr_6           go to state 45
    expr_5           go to state 46
    expr_4           go to state 47
    expr_3           go to state 48
    expr_2           go to state 49
    expr_1           go to state 50
    func_call        go to state 51
    ident_name       go to state 52
    array_subscript  go to state 53
    atomic           go to state 54


State 191

   47 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt .

    $default  reduce using rule 47 (matched_if_stmt)


State 192

   51 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt .

    $default  reduce using rule 51 (open_if_stmt)

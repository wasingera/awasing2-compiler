Terminals unused in grammar

   TOKEN_EOF
   FALSE
   TRUE
   WHILE
   TOKEN_ERROR
   COMMENT


Grammar

    0 $accept: program $end

    1 program: decl_list
    2        | %empty

    3 decl_list: decl_var decl_list
    4          | decl_func decl_list
    5          | decl_var
    6          | decl_func

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON
    8         | IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON

    9 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

   11 type_func: INTEGER param_list_e
   12          | BOOLEAN param_list_e
   13          | CHAR param_list_e
   14          | STRING param_list_e
   15          | VOID param_list_e
   16          | AUTO param_list_e
   17          | FUNCTION type_func param_list_e

   18 param_list_e: OPEN_PAREN param_list CLOSE_PAREN
   19             | OPEN_PAREN CLOSE_PAREN

   20 param_list: IDENTIFIER COLON type_param COMMA param_list
   21           | IDENTIFIER COLON type_param

   22 type_param: INTEGER
   23           | BOOLEAN
   24           | CHAR
   25           | STRING
   26           | AUTO
   27           | FUNCTION
   28           | ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

   29 type_var: INTEGER
   30         | BOOLEAN
   31         | CHAR
   32         | STRING
   33         | AUTO
   34         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

   36 stmt: if_stmt

   37 other_stmt: RETURN expr_or_e SEMICOLON
   38           | PRINT expr_list_e SEMICOLON
   39           | OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | expr_10 SEMICOLON
   41           | decl_var

   42 condition: OPEN_PAREN expr_10 CLOSE_PAREN

   43 if_stmt: matched_if_stmt
   44        | open_if_stmt

   45 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt
   46                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | other_stmt

   48 open_if_stmt: IF condition if_stmt
   49             | IF condition matched_if_stmt ELSE open_if_stmt
   50             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

   51 expr_or_e: expr_10
   52          | %empty

   53 stmt_list_e: stmt_list
   54            | %empty

   55 stmt_list: stmt stmt_list
   56          | stmt

   57 expr_10: expr_9 EQUALS expr_10
   58        | expr_9 QUESTION expr_10 COLON expr_10
   59        | expr_9

   60 expr_9: expr_9 OR expr_8
   61       | expr_8

   62 expr_8: expr_8 AND expr_7
   63       | expr_7

   64 expr_7: expr_7 LT expr_6
   65       | expr_7 LE expr_6
   66       | expr_7 EE expr_6
   67       | expr_7 GE expr_6
   68       | expr_7 GT expr_6
   69       | expr_7 NE expr_6
   70       | expr_6

   71 expr_6: expr_6 PLUS expr_5
   72       | expr_6 MINUS expr_5
   73       | expr_5

   74 expr_5: expr_5 MULTIPLY expr_4
   75       | expr_5 DIVIDE expr_4
   76       | expr_5 REMAINDER expr_4
   77       | expr_4

   78 expr_4: expr_3 EXP expr_4
   79       | expr_3

   80 expr_3: MINUS expr_3
   81       | NOT expr_3
   82       | expr_2

   83 expr_2: expr_2 INCREMENT
   84       | expr_2 DECREMENT
   85       | expr_1

   86 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN
   87       | func_call
   88       | array_subscript
   89       | atomic

   90 func_call: ident_name OPEN_PAREN expr_list_e CLOSE_PAREN

   91 ident_name: IDENTIFIER

   92 array_subscript: ident_name bracket_set

   93 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   94            | OPEN_SQUARE expr_10 CLOSE_SQUARE

   95 expr_list_e: expr_list
   96            | %empty

   97 expr_list: expr_10 COMMA expr_list
   98          | expr_10

   99 atomic: INTEGER_LITERAL
  100       | BOOLEAN_LITERAL
  101       | CHAR_LITERAL
  102       | STRING_LITERAL
  103       | ident_name
  104       | OPEN_CURLY expr_list CLOSE_CURLY


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259) 28 34 35
AUTO (260) 16 26 33
BOOLEAN (261) 12 23 30
CHAR (262) 13 24 31
ELSE (263) 45 49
FALSE (264)
FOR (265) 46 50
FUNCTION (266) 9 10 17 27
IF (267) 45 48 49
INTEGER (268) 11 22 29
PRINT (269) 38
RETURN (270) 37
STRING (271) 14 25 32
TRUE (272)
VOID (273) 15
WHILE (274)
INTEGER_LITERAL (275) 99
BOOLEAN_LITERAL (276) 100
CHAR_LITERAL (277) 101
STRING_LITERAL (278) 102
IDENTIFIER (279) 7 8 9 10 20 21 91
TOKEN_ERROR (280)
COMMENT (281)
SEMICOLON (282) 7 8 9 37 38 40 46 50
COLON (283) 7 8 9 10 20 21 58
QUESTION (284) 58
EQUALS (285) 8 10 57
GT (286) 68
GE (287) 67
LT (288) 64
LE (289) 65
EE (290) 66
NE (291) 69
AND (292) 62
OR (293) 60
INCREMENT (294) 83
DECREMENT (295) 84
OPEN_PAREN (296) 18 19 42 46 50 86 90
CLOSE_PAREN (297) 18 19 42 46 50 86 90
OPEN_SQUARE (298) 28 34 35 93 94
CLOSE_SQUARE (299) 28 34 35 93 94
OPEN_CURLY (300) 10 39 104
CLOSE_CURLY (301) 10 39 104
PLUS (302) 71
MINUS (303) 72 80
MULTIPLY (304) 74
DIVIDE (305) 75
REMAINDER (306) 76
EXP (307) 78
NOT (308) 81
COMMA (309) 20 97


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0
decl_list (57)
    on left: 3 4 5 6, on right: 1 3 4
decl_var (58)
    on left: 7 8, on right: 3 5 41
decl_func (59)
    on left: 9 10, on right: 4 6
type_func (60)
    on left: 11 12 13 14 15 16 17, on right: 9 10 17
param_list_e (61)
    on left: 18 19, on right: 11 12 13 14 15 16 17
param_list (62)
    on left: 20 21, on right: 18 20
type_param (63)
    on left: 22 23 24 25 26 27 28, on right: 20 21 28
type_var (64)
    on left: 29 30 31 32 33 34 35, on right: 7 8 34 35
stmt (65)
    on left: 36, on right: 55 56
other_stmt (66)
    on left: 37 38 39 40 41, on right: 47
condition (67)
    on left: 42, on right: 45 48 49
if_stmt (68)
    on left: 43 44, on right: 36 48
matched_if_stmt (69)
    on left: 45 46 47, on right: 43 45 46 49
open_if_stmt (70)
    on left: 48 49 50, on right: 44 49 50
expr_or_e (71)
    on left: 51 52, on right: 37 46 50
stmt_list_e (72)
    on left: 53 54, on right: 39
stmt_list (73)
    on left: 55 56, on right: 10 53 55
expr_10 (74)
    on left: 57 58 59, on right: 8 34 40 42 51 57 58 86 93 94 97 98
expr_9 (75)
    on left: 60 61, on right: 57 58 59 60
expr_8 (76)
    on left: 62 63, on right: 60 61 62
expr_7 (77)
    on left: 64 65 66 67 68 69 70, on right: 62 63 64 65 66 67 68 69
expr_6 (78)
    on left: 71 72 73, on right: 64 65 66 67 68 69 70 71 72
expr_5 (79)
    on left: 74 75 76 77, on right: 71 72 73 74 75 76
expr_4 (80)
    on left: 78 79, on right: 74 75 76 77 78
expr_3 (81)
    on left: 80 81 82, on right: 78 79 80 81
expr_2 (82)
    on left: 83 84 85, on right: 82 83 84
expr_1 (83)
    on left: 86 87 88 89, on right: 85
func_call (84)
    on left: 90, on right: 87
ident_name (85)
    on left: 91, on right: 90 92 103
array_subscript (86)
    on left: 92, on right: 88
bracket_set (87)
    on left: 93 94, on right: 92 93
expr_list_e (88)
    on left: 95 96, on right: 38 90
expr_list (89)
    on left: 97 98, on right: 95 97 104
atomic (90)
    on left: 99 100 101 102 103 104, on right: 89


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2        | . %empty  [$end]
    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program    go to state 2
    decl_list  go to state 3
    decl_var   go to state 4
    decl_func  go to state 5


State 1

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER . COLON FUNCTION type_func SEMICOLON
   10          | IDENTIFIER . COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    COLON  shift, and go to state 6


State 2

    0 $accept: program . $end

    $end  shift, and go to state 7


State 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


State 4

    3 decl_list: . decl_var decl_list
    3          | decl_var . decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    5          | decl_var .  [$end]
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 5 (decl_list)

    decl_list  go to state 8
    decl_var   go to state 4
    decl_func  go to state 5


State 5

    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    4          | decl_func . decl_list
    5          | . decl_var
    6          | . decl_func
    6          | decl_func .  [$end]
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func SEMICOLON
   10          | . IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 6 (decl_list)

    decl_list  go to state 9
    decl_var   go to state 4
    decl_func  go to state 5


State 6

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER COLON . FUNCTION type_func SEMICOLON
   10          | IDENTIFIER COLON . FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

    ARRAY     shift, and go to state 10
    AUTO      shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    CHAR      shift, and go to state 13
    FUNCTION  shift, and go to state 14
    INTEGER   shift, and go to state 15
    STRING    shift, and go to state 16

    type_var  go to state 17


State 7

    0 $accept: program $end .

    $default  accept


State 8

    3 decl_list: decl_var decl_list .

    $default  reduce using rule 3 (decl_list)


State 9

    4 decl_list: decl_func decl_list .

    $default  reduce using rule 4 (decl_list)


State 10

   34 type_var: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | ARRAY . OPEN_SQUARE CLOSE_SQUARE type_var

    OPEN_SQUARE  shift, and go to state 18


State 11

   33 type_var: AUTO .

    $default  reduce using rule 33 (type_var)


State 12

   30 type_var: BOOLEAN .

    $default  reduce using rule 30 (type_var)


State 13

   31 type_var: CHAR .

    $default  reduce using rule 31 (type_var)


State 14

    9 decl_func: IDENTIFIER COLON FUNCTION . type_func SEMICOLON
   10          | IDENTIFIER COLON FUNCTION . type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   11 type_func: . INTEGER param_list_e
   12          | . BOOLEAN param_list_e
   13          | . CHAR param_list_e
   14          | . STRING param_list_e
   15          | . VOID param_list_e
   16          | . AUTO param_list_e
   17          | . FUNCTION type_func param_list_e

    AUTO      shift, and go to state 19
    BOOLEAN   shift, and go to state 20
    CHAR      shift, and go to state 21
    FUNCTION  shift, and go to state 22
    INTEGER   shift, and go to state 23
    STRING    shift, and go to state 24
    VOID      shift, and go to state 25

    type_func  go to state 26


State 15

   29 type_var: INTEGER .

    $default  reduce using rule 29 (type_var)


State 16

   32 type_var: STRING .

    $default  reduce using rule 32 (type_var)


State 17

    7 decl_var: IDENTIFIER COLON type_var . SEMICOLON
    8         | IDENTIFIER COLON type_var . EQUALS expr_10 SEMICOLON

    SEMICOLON  shift, and go to state 27
    EQUALS     shift, and go to state 28


State 18

   34 type_var: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var
   35         | ARRAY OPEN_SQUARE . CLOSE_SQUARE type_var
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    CLOSE_SQUARE     shift, and go to state 35
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 39
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 19

   16 type_func: AUTO . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 54


State 20

   12 type_func: BOOLEAN . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 55


State 21

   13 type_func: CHAR . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 56


State 22

   11 type_func: . INTEGER param_list_e
   12          | . BOOLEAN param_list_e
   13          | . CHAR param_list_e
   14          | . STRING param_list_e
   15          | . VOID param_list_e
   16          | . AUTO param_list_e
   17          | . FUNCTION type_func param_list_e
   17          | FUNCTION . type_func param_list_e

    AUTO      shift, and go to state 19
    BOOLEAN   shift, and go to state 20
    CHAR      shift, and go to state 21
    FUNCTION  shift, and go to state 22
    INTEGER   shift, and go to state 23
    STRING    shift, and go to state 24
    VOID      shift, and go to state 25

    type_func  go to state 57


State 23

   11 type_func: INTEGER . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 58


State 24

   14 type_func: STRING . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 59


State 25

   15 type_func: VOID . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 60


State 26

    9 decl_func: IDENTIFIER COLON FUNCTION type_func . SEMICOLON
   10          | IDENTIFIER COLON FUNCTION type_func . EQUALS OPEN_CURLY stmt_list CLOSE_CURLY

    SEMICOLON  shift, and go to state 61
    EQUALS     shift, and go to state 62


State 27

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON .

    $default  reduce using rule 7 (decl_var)


State 28

    8 decl_var: IDENTIFIER COLON type_var EQUALS . expr_10 SEMICOLON
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 63
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 29

   99 atomic: INTEGER_LITERAL .

    $default  reduce using rule 99 (atomic)


State 30

  100 atomic: BOOLEAN_LITERAL .

    $default  reduce using rule 100 (atomic)


State 31

  101 atomic: CHAR_LITERAL .

    $default  reduce using rule 101 (atomic)


State 32

  102 atomic: STRING_LITERAL .

    $default  reduce using rule 102 (atomic)


State 33

   91 ident_name: IDENTIFIER .

    $default  reduce using rule 91 (ident_name)


State 34

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | OPEN_PAREN . expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 64
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 35

   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var
   35         | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 65


State 36

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   97 expr_list: . expr_10 COMMA expr_list
   98          | . expr_10
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY
  104       | OPEN_CURLY . expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 66
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    expr_list        go to state 67
    atomic           go to state 52


State 37

   80 expr_3: . MINUS expr_3
   80       | MINUS . expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_3           go to state 68
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 38

   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   81       | NOT . expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_3           go to state 69
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 39

   34 type_var: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var

    CLOSE_SQUARE  shift, and go to state 70


State 40

   57 expr_10: expr_9 . EQUALS expr_10
   58        | expr_9 . QUESTION expr_10 COLON expr_10
   59        | expr_9 .  [SEMICOLON, COLON, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   60 expr_9: expr_9 . OR expr_8

    QUESTION  shift, and go to state 71
    EQUALS    shift, and go to state 72
    OR        shift, and go to state 73

    $default  reduce using rule 59 (expr_10)


State 41

   61 expr_9: expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   62 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 74

    $default  reduce using rule 61 (expr_9)


State 42

   63 expr_8: expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   64 expr_7: expr_7 . LT expr_6
   65       | expr_7 . LE expr_6
   66       | expr_7 . EE expr_6
   67       | expr_7 . GE expr_6
   68       | expr_7 . GT expr_6
   69       | expr_7 . NE expr_6

    GT  shift, and go to state 75
    GE  shift, and go to state 76
    LT  shift, and go to state 77
    LE  shift, and go to state 78
    EE  shift, and go to state 79
    NE  shift, and go to state 80

    $default  reduce using rule 63 (expr_8)


State 43

   70 expr_7: expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 70 (expr_7)


State 44

   73 expr_6: expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   74 expr_5: expr_5 . MULTIPLY expr_4
   75       | expr_5 . DIVIDE expr_4
   76       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 83
    DIVIDE     shift, and go to state 84
    REMAINDER  shift, and go to state 85

    $default  reduce using rule 73 (expr_6)


State 45

   77 expr_5: expr_4 .

    $default  reduce using rule 77 (expr_5)


State 46

   78 expr_4: expr_3 . EXP expr_4
   79       | expr_3 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, COMMA]

    EXP  shift, and go to state 86

    $default  reduce using rule 79 (expr_4)


State 47

   82 expr_3: expr_2 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]
   83 expr_2: expr_2 . INCREMENT
   84       | expr_2 . DECREMENT

    INCREMENT  shift, and go to state 87
    DECREMENT  shift, and go to state 88

    $default  reduce using rule 82 (expr_3)


State 48

   85 expr_2: expr_1 .

    $default  reduce using rule 85 (expr_2)


State 49

   87 expr_1: func_call .

    $default  reduce using rule 87 (expr_1)


State 50

   90 func_call: ident_name . OPEN_PAREN expr_list_e CLOSE_PAREN
   92 array_subscript: ident_name . bracket_set
   93 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   94            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  103 atomic: ident_name .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_PAREN   shift, and go to state 89
    OPEN_SQUARE  shift, and go to state 90

    $default  reduce using rule 103 (atomic)

    bracket_set  go to state 91


State 51

   88 expr_1: array_subscript .

    $default  reduce using rule 88 (expr_1)


State 52

   89 expr_1: atomic .

    $default  reduce using rule 89 (expr_1)


State 53

   18 param_list_e: OPEN_PAREN . param_list CLOSE_PAREN
   19             | OPEN_PAREN . CLOSE_PAREN
   20 param_list: . IDENTIFIER COLON type_param COMMA param_list
   21           | . IDENTIFIER COLON type_param

    IDENTIFIER   shift, and go to state 92
    CLOSE_PAREN  shift, and go to state 93

    param_list  go to state 94


State 54

   16 type_func: AUTO param_list_e .

    $default  reduce using rule 16 (type_func)


State 55

   12 type_func: BOOLEAN param_list_e .

    $default  reduce using rule 12 (type_func)


State 56

   13 type_func: CHAR param_list_e .

    $default  reduce using rule 13 (type_func)


State 57

   17 type_func: FUNCTION type_func . param_list_e
   18 param_list_e: . OPEN_PAREN param_list CLOSE_PAREN
   19             | . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 53

    param_list_e  go to state 95


State 58

   11 type_func: INTEGER param_list_e .

    $default  reduce using rule 11 (type_func)


State 59

   14 type_func: STRING param_list_e .

    $default  reduce using rule 14 (type_func)


State 60

   15 type_func: VOID param_list_e .

    $default  reduce using rule 15 (type_func)


State 61

    9 decl_func: IDENTIFIER COLON FUNCTION type_func SEMICOLON .

    $default  reduce using rule 9 (decl_func)


State 62

   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS . OPEN_CURLY stmt_list CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 96


State 63

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 97


State 64

   86 expr_1: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 98


State 65

   35 type_var: ARRAY OPEN_SQUARE CLOSE_SQUARE type_var .

    $default  reduce using rule 35 (type_var)


State 66

   97 expr_list: expr_10 . COMMA expr_list
   98          | expr_10 .  [SEMICOLON, CLOSE_PAREN, CLOSE_CURLY]

    COMMA  shift, and go to state 99

    $default  reduce using rule 98 (expr_list)


State 67

  104 atomic: OPEN_CURLY expr_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 100


State 68

   80 expr_3: MINUS expr_3 .

    $default  reduce using rule 80 (expr_3)


State 69

   81 expr_3: NOT expr_3 .

    $default  reduce using rule 81 (expr_3)


State 70

   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   34         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var
   35         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 101


State 71

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | expr_9 QUESTION . expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 102
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 72

   57 expr_10: . expr_9 EQUALS expr_10
   57        | expr_9 EQUALS . expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 103
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 73

   60 expr_9: expr_9 OR . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_8           go to state 104
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 74

   62 expr_8: expr_8 AND . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_7           go to state 105
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 75

   68 expr_7: expr_7 GT . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_6           go to state 106
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 76

   67 expr_7: expr_7 GE . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_6           go to state 107
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 77

   64 expr_7: expr_7 LT . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_6           go to state 108
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 78

   65 expr_7: expr_7 LE . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_6           go to state 109
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 79

   66 expr_7: expr_7 EE . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_6           go to state 110
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 80

   69 expr_7: expr_7 NE . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_6           go to state 111
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 81

   71 expr_6: expr_6 PLUS . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_5           go to state 112
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 82

   72 expr_6: expr_6 MINUS . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_5           go to state 113
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 83

   74 expr_5: expr_5 MULTIPLY . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_4           go to state 114
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 84

   75 expr_5: expr_5 DIVIDE . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_4           go to state 115
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 85

   76 expr_5: expr_5 REMAINDER . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_4           go to state 116
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 86

   78 expr_4: . expr_3 EXP expr_4
   78       | expr_3 EXP . expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_4           go to state 117
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 87

   83 expr_2: expr_2 INCREMENT .

    $default  reduce using rule 83 (expr_2)


State 88

   84 expr_2: expr_2 DECREMENT .

    $default  reduce using rule 84 (expr_2)


State 89

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   90          | ident_name OPEN_PAREN . expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   95 expr_list_e: . expr_list
   96            | . %empty  [CLOSE_PAREN]
   97 expr_list: . expr_10 COMMA expr_list
   98          | . expr_10
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 96 (expr_list_e)

    expr_10          go to state 66
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    expr_list_e      go to state 118
    expr_list        go to state 119
    atomic           go to state 52


State 90

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   93 bracket_set: OPEN_SQUARE . expr_10 CLOSE_SQUARE bracket_set
   94            | OPEN_SQUARE . expr_10 CLOSE_SQUARE
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 120
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 91

   92 array_subscript: ident_name bracket_set .

    $default  reduce using rule 92 (array_subscript)


State 92

   20 param_list: IDENTIFIER . COLON type_param COMMA param_list
   21           | IDENTIFIER . COLON type_param

    COLON  shift, and go to state 121


State 93

   19 param_list_e: OPEN_PAREN CLOSE_PAREN .

    $default  reduce using rule 19 (param_list_e)


State 94

   18 param_list_e: OPEN_PAREN param_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 122


State 95

   17 type_func: FUNCTION type_func param_list_e .

    $default  reduce using rule 17 (type_func)


State 96

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY . stmt_list CLOSE_CURLY
   36 stmt: . if_stmt
   37 other_stmt: . RETURN expr_or_e SEMICOLON
   38           | . PRINT expr_list_e SEMICOLON
   39           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | . expr_10 SEMICOLON
   41           | . decl_var
   43 if_stmt: . matched_if_stmt
   44        | . open_if_stmt
   45 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   46                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | . other_stmt
   48 open_if_stmt: . IF condition if_stmt
   49             | . IF condition matched_if_stmt ELSE open_if_stmt
   50             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   55 stmt_list: . stmt stmt_list
   56          | . stmt
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 123
    IF               shift, and go to state 124
    PRINT            shift, and go to state 125
    RETURN           shift, and go to state 126
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 127
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 128
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    decl_var         go to state 129
    stmt             go to state 130
    other_stmt       go to state 131
    if_stmt          go to state 132
    matched_if_stmt  go to state 133
    open_if_stmt     go to state 134
    stmt_list        go to state 135
    expr_10          go to state 136
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 97

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 8 (decl_var)


State 98

   86 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 86 (expr_1)


State 99

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   97 expr_list: . expr_10 COMMA expr_list
   97          | expr_10 COMMA . expr_list
   98          | . expr_10
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 66
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    expr_list        go to state 137
    atomic           go to state 52


State 100

  104 atomic: OPEN_CURLY expr_list CLOSE_CURLY .

    $default  reduce using rule 104 (atomic)


State 101

   34 type_var: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var .

    $default  reduce using rule 34 (type_var)


State 102

   58 expr_10: expr_9 QUESTION expr_10 . COLON expr_10

    COLON  shift, and go to state 138


State 103

   57 expr_10: expr_9 EQUALS expr_10 .

    $default  reduce using rule 57 (expr_10)


State 104

   60 expr_9: expr_9 OR expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   62 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 74

    $default  reduce using rule 60 (expr_9)


State 105

   62 expr_8: expr_8 AND expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   64 expr_7: expr_7 . LT expr_6
   65       | expr_7 . LE expr_6
   66       | expr_7 . EE expr_6
   67       | expr_7 . GE expr_6
   68       | expr_7 . GT expr_6
   69       | expr_7 . NE expr_6

    GT  shift, and go to state 75
    GE  shift, and go to state 76
    LT  shift, and go to state 77
    LE  shift, and go to state 78
    EE  shift, and go to state 79
    NE  shift, and go to state 80

    $default  reduce using rule 62 (expr_8)


State 106

   68 expr_7: expr_7 GT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 68 (expr_7)


State 107

   67 expr_7: expr_7 GE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 67 (expr_7)


State 108

   64 expr_7: expr_7 LT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 64 (expr_7)


State 109

   65 expr_7: expr_7 LE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 65 (expr_7)


State 110

   66 expr_7: expr_7 EE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 66 (expr_7)


State 111

   69 expr_7: expr_7 NE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   71 expr_6: expr_6 . PLUS expr_5
   72       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82

    $default  reduce using rule 69 (expr_7)


State 112

   71 expr_6: expr_6 PLUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   74 expr_5: expr_5 . MULTIPLY expr_4
   75       | expr_5 . DIVIDE expr_4
   76       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 83
    DIVIDE     shift, and go to state 84
    REMAINDER  shift, and go to state 85

    $default  reduce using rule 71 (expr_6)


State 113

   72 expr_6: expr_6 MINUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   74 expr_5: expr_5 . MULTIPLY expr_4
   75       | expr_5 . DIVIDE expr_4
   76       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 83
    DIVIDE     shift, and go to state 84
    REMAINDER  shift, and go to state 85

    $default  reduce using rule 72 (expr_6)


State 114

   74 expr_5: expr_5 MULTIPLY expr_4 .

    $default  reduce using rule 74 (expr_5)


State 115

   75 expr_5: expr_5 DIVIDE expr_4 .

    $default  reduce using rule 75 (expr_5)


State 116

   76 expr_5: expr_5 REMAINDER expr_4 .

    $default  reduce using rule 76 (expr_5)


State 117

   78 expr_4: expr_3 EXP expr_4 .

    $default  reduce using rule 78 (expr_4)


State 118

   90 func_call: ident_name OPEN_PAREN expr_list_e . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 139


State 119

   95 expr_list_e: expr_list .

    $default  reduce using rule 95 (expr_list_e)


State 120

   93 bracket_set: OPEN_SQUARE expr_10 . CLOSE_SQUARE bracket_set
   94            | OPEN_SQUARE expr_10 . CLOSE_SQUARE

    CLOSE_SQUARE  shift, and go to state 140


State 121

   20 param_list: IDENTIFIER COLON . type_param COMMA param_list
   21           | IDENTIFIER COLON . type_param
   22 type_param: . INTEGER
   23           | . BOOLEAN
   24           | . CHAR
   25           | . STRING
   26           | . AUTO
   27           | . FUNCTION
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

    ARRAY     shift, and go to state 141
    AUTO      shift, and go to state 142
    BOOLEAN   shift, and go to state 143
    CHAR      shift, and go to state 144
    FUNCTION  shift, and go to state 145
    INTEGER   shift, and go to state 146
    STRING    shift, and go to state 147

    type_param  go to state 148


State 122

   18 param_list_e: OPEN_PAREN param_list CLOSE_PAREN .

    $default  reduce using rule 18 (param_list_e)


State 123

   46 matched_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    OPEN_PAREN  shift, and go to state 149


State 124

   42 condition: . OPEN_PAREN expr_10 CLOSE_PAREN
   45 matched_if_stmt: IF . condition matched_if_stmt ELSE matched_if_stmt
   48 open_if_stmt: IF . condition if_stmt
   49             | IF . condition matched_if_stmt ELSE open_if_stmt

    OPEN_PAREN  shift, and go to state 150

    condition  go to state 151


State 125

   38 other_stmt: PRINT . expr_list_e SEMICOLON
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   95 expr_list_e: . expr_list
   96            | . %empty  [SEMICOLON]
   97 expr_list: . expr_10 COMMA expr_list
   98          | . expr_10
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 96 (expr_list_e)

    expr_10          go to state 66
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    expr_list_e      go to state 152
    expr_list        go to state 119
    atomic           go to state 52


State 126

   37 other_stmt: RETURN . expr_or_e SEMICOLON
   51 expr_or_e: . expr_10
   52          | . %empty  [SEMICOLON]
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 52 (expr_or_e)

    expr_or_e        go to state 153
    expr_10          go to state 154
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 127

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
   91 ident_name: IDENTIFIER .  [SEMICOLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, OPEN_PAREN, OPEN_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    COLON  shift, and go to state 155

    $default  reduce using rule 91 (ident_name)


State 128

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 stmt: . if_stmt
   37 other_stmt: . RETURN expr_or_e SEMICOLON
   38           | . PRINT expr_list_e SEMICOLON
   39           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | OPEN_CURLY . stmt_list_e CLOSE_CURLY
   40           | . expr_10 SEMICOLON
   41           | . decl_var
   43 if_stmt: . matched_if_stmt
   44        | . open_if_stmt
   45 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   46                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | . other_stmt
   48 open_if_stmt: . IF condition if_stmt
   49             | . IF condition matched_if_stmt ELSE open_if_stmt
   50             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   53 stmt_list_e: . stmt_list
   54            | . %empty  [CLOSE_CURLY]
   55 stmt_list: . stmt stmt_list
   56          | . stmt
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   97 expr_list: . expr_10 COMMA expr_list
   98          | . expr_10
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY
  104       | OPEN_CURLY . expr_list CLOSE_CURLY

    FOR              shift, and go to state 123
    IF               shift, and go to state 124
    PRINT            shift, and go to state 125
    RETURN           shift, and go to state 126
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 127
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 128
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 54 (stmt_list_e)

    decl_var         go to state 129
    stmt             go to state 130
    other_stmt       go to state 131
    if_stmt          go to state 132
    matched_if_stmt  go to state 133
    open_if_stmt     go to state 134
    stmt_list_e      go to state 156
    stmt_list        go to state 157
    expr_10          go to state 158
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    expr_list        go to state 67
    atomic           go to state 52


State 129

   41 other_stmt: decl_var .

    $default  reduce using rule 41 (other_stmt)


State 130

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 stmt: . if_stmt
   37 other_stmt: . RETURN expr_or_e SEMICOLON
   38           | . PRINT expr_list_e SEMICOLON
   39           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | . expr_10 SEMICOLON
   41           | . decl_var
   43 if_stmt: . matched_if_stmt
   44        | . open_if_stmt
   45 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   46                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | . other_stmt
   48 open_if_stmt: . IF condition if_stmt
   49             | . IF condition matched_if_stmt ELSE open_if_stmt
   50             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   55 stmt_list: . stmt stmt_list
   55          | stmt . stmt_list
   56          | . stmt
   56          | stmt .  [CLOSE_CURLY]
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 123
    IF               shift, and go to state 124
    PRINT            shift, and go to state 125
    RETURN           shift, and go to state 126
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 127
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 128
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 56 (stmt_list)

    decl_var         go to state 129
    stmt             go to state 130
    other_stmt       go to state 131
    if_stmt          go to state 132
    matched_if_stmt  go to state 133
    open_if_stmt     go to state 134
    stmt_list        go to state 159
    expr_10          go to state 136
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 131

   47 matched_if_stmt: other_stmt .

    $default  reduce using rule 47 (matched_if_stmt)


State 132

   36 stmt: if_stmt .

    $default  reduce using rule 36 (stmt)


State 133

   43 if_stmt: matched_if_stmt .

    $default  reduce using rule 43 (if_stmt)


State 134

   44 if_stmt: open_if_stmt .

    $default  reduce using rule 44 (if_stmt)


State 135

   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 160


State 136

   40 other_stmt: expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 161


State 137

   97 expr_list: expr_10 COMMA expr_list .

    $default  reduce using rule 97 (expr_list)


State 138

   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | expr_9 QUESTION expr_10 COLON . expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 162
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 139

   90 func_call: ident_name OPEN_PAREN expr_list_e CLOSE_PAREN .

    $default  reduce using rule 90 (func_call)


State 140

   93 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   93            | OPEN_SQUARE expr_10 CLOSE_SQUARE . bracket_set
   94            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
   94            | OPEN_SQUARE expr_10 CLOSE_SQUARE .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_SQUARE  shift, and go to state 90

    $default  reduce using rule 94 (bracket_set)

    bracket_set  go to state 163


State 141

   28 type_param: ARRAY . OPEN_SQUARE CLOSE_SQUARE type_param

    OPEN_SQUARE  shift, and go to state 164


State 142

   26 type_param: AUTO .

    $default  reduce using rule 26 (type_param)


State 143

   23 type_param: BOOLEAN .

    $default  reduce using rule 23 (type_param)


State 144

   24 type_param: CHAR .

    $default  reduce using rule 24 (type_param)


State 145

   27 type_param: FUNCTION .

    $default  reduce using rule 27 (type_param)


State 146

   22 type_param: INTEGER .

    $default  reduce using rule 22 (type_param)


State 147

   25 type_param: STRING .

    $default  reduce using rule 25 (type_param)


State 148

   20 param_list: IDENTIFIER COLON type_param . COMMA param_list
   21           | IDENTIFIER COLON type_param .  [CLOSE_PAREN]

    COMMA  shift, and go to state 165

    $default  reduce using rule 21 (param_list)


State 149

   46 matched_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   51 expr_or_e: . expr_10
   52          | . %empty  [SEMICOLON]
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 52 (expr_or_e)

    expr_or_e        go to state 166
    expr_10          go to state 154
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 150

   42 condition: OPEN_PAREN . expr_10 CLOSE_PAREN
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    expr_10          go to state 167
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 151

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   37 other_stmt: . RETURN expr_or_e SEMICOLON
   38           | . PRINT expr_list_e SEMICOLON
   39           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | . expr_10 SEMICOLON
   41           | . decl_var
   43 if_stmt: . matched_if_stmt
   44        | . open_if_stmt
   45 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | IF condition . matched_if_stmt ELSE matched_if_stmt
   46                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | . other_stmt
   48 open_if_stmt: . IF condition if_stmt
   48             | IF condition . if_stmt
   49             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | IF condition . matched_if_stmt ELSE open_if_stmt
   50             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 123
    IF               shift, and go to state 124
    PRINT            shift, and go to state 125
    RETURN           shift, and go to state 126
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 127
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 128
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    decl_var         go to state 129
    other_stmt       go to state 131
    if_stmt          go to state 168
    matched_if_stmt  go to state 169
    open_if_stmt     go to state 134
    expr_10          go to state 136
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 152

   38 other_stmt: PRINT expr_list_e . SEMICOLON

    SEMICOLON  shift, and go to state 170


State 153

   37 other_stmt: RETURN expr_or_e . SEMICOLON

    SEMICOLON  shift, and go to state 171


State 154

   51 expr_or_e: expr_10 .

    $default  reduce using rule 51 (expr_or_e)


State 155

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   35         | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 17


State 156

   39 other_stmt: OPEN_CURLY stmt_list_e . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 172


State 157

   53 stmt_list_e: stmt_list .

    $default  reduce using rule 53 (stmt_list_e)


State 158

   40 other_stmt: expr_10 . SEMICOLON
   97 expr_list: expr_10 . COMMA expr_list
   98          | expr_10 .  [CLOSE_CURLY]

    SEMICOLON  shift, and go to state 161
    COMMA      shift, and go to state 99

    $default  reduce using rule 98 (expr_list)


State 159

   55 stmt_list: stmt stmt_list .

    $default  reduce using rule 55 (stmt_list)


State 160

   10 decl_func: IDENTIFIER COLON FUNCTION type_func EQUALS OPEN_CURLY stmt_list CLOSE_CURLY .

    $default  reduce using rule 10 (decl_func)


State 161

   40 other_stmt: expr_10 SEMICOLON .

    $default  reduce using rule 40 (other_stmt)


State 162

   58 expr_10: expr_9 QUESTION expr_10 COLON expr_10 .

    $default  reduce using rule 58 (expr_10)


State 163

   93 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set .

    $default  reduce using rule 93 (bracket_set)


State 164

   28 type_param: ARRAY OPEN_SQUARE . CLOSE_SQUARE type_param

    CLOSE_SQUARE  shift, and go to state 173


State 165

   20 param_list: . IDENTIFIER COLON type_param COMMA param_list
   20           | IDENTIFIER COLON type_param COMMA . param_list
   21           | . IDENTIFIER COLON type_param

    IDENTIFIER  shift, and go to state 92

    param_list  go to state 174


State 166

   46 matched_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 175


State 167

   42 condition: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 176


State 168

   48 open_if_stmt: IF condition if_stmt .

    $default  reduce using rule 48 (open_if_stmt)


State 169

   43 if_stmt: matched_if_stmt .  [FOR, IF, PRINT, RETURN, INTEGER_LITERAL, BOOLEAN_LITERAL, CHAR_LITERAL, STRING_LITERAL, IDENTIFIER, OPEN_PAREN, OPEN_CURLY, CLOSE_CURLY, MINUS, NOT]
   45 matched_if_stmt: IF condition matched_if_stmt . ELSE matched_if_stmt
   49 open_if_stmt: IF condition matched_if_stmt . ELSE open_if_stmt

    ELSE  shift, and go to state 177

    $default  reduce using rule 43 (if_stmt)


State 170

   38 other_stmt: PRINT expr_list_e SEMICOLON .

    $default  reduce using rule 38 (other_stmt)


State 171

   37 other_stmt: RETURN expr_or_e SEMICOLON .

    $default  reduce using rule 37 (other_stmt)


State 172

   39 other_stmt: OPEN_CURLY stmt_list_e CLOSE_CURLY .

    $default  reduce using rule 39 (other_stmt)


State 173

   22 type_param: . INTEGER
   23           | . BOOLEAN
   24           | . CHAR
   25           | . STRING
   26           | . AUTO
   27           | . FUNCTION
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param
   28           | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_param

    ARRAY     shift, and go to state 141
    AUTO      shift, and go to state 142
    BOOLEAN   shift, and go to state 143
    CHAR      shift, and go to state 144
    FUNCTION  shift, and go to state 145
    INTEGER   shift, and go to state 146
    STRING    shift, and go to state 147

    type_param  go to state 178


State 174

   20 param_list: IDENTIFIER COLON type_param COMMA param_list .

    $default  reduce using rule 20 (param_list)


State 175

   46 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   51 expr_or_e: . expr_10
   52          | . %empty  [SEMICOLON]
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 52 (expr_or_e)

    expr_or_e        go to state 179
    expr_10          go to state 154
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 176

   42 condition: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 42 (condition)


State 177

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   37 other_stmt: . RETURN expr_or_e SEMICOLON
   38           | . PRINT expr_list_e SEMICOLON
   39           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | . expr_10 SEMICOLON
   41           | . decl_var
   45 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | IF condition matched_if_stmt ELSE . matched_if_stmt
   46                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   47                | . other_stmt
   48 open_if_stmt: . IF condition if_stmt
   49             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | IF condition matched_if_stmt ELSE . open_if_stmt
   50             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 123
    IF               shift, and go to state 124
    PRINT            shift, and go to state 125
    RETURN           shift, and go to state 126
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 127
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 128
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    decl_var         go to state 129
    other_stmt       go to state 131
    matched_if_stmt  go to state 180
    open_if_stmt     go to state 181
    expr_10          go to state 136
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 178

   28 type_param: ARRAY OPEN_SQUARE CLOSE_SQUARE type_param .

    $default  reduce using rule 28 (type_param)


State 179

   46 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 182


State 180

   45 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt .

    $default  reduce using rule 45 (matched_if_stmt)


State 181

   49 open_if_stmt: IF condition matched_if_stmt ELSE open_if_stmt .

    $default  reduce using rule 49 (open_if_stmt)


State 182

   46 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN open_if_stmt
   51 expr_or_e: . expr_10
   52          | . %empty  [CLOSE_PAREN]
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 33
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 36
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    $default  reduce using rule 52 (expr_or_e)

    expr_or_e        go to state 183
    expr_10          go to state 154
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 183

   46 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN matched_if_stmt
   50 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN open_if_stmt

    CLOSE_PAREN  shift, and go to state 184


State 184

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   37 other_stmt: . RETURN expr_or_e SEMICOLON
   38           | . PRINT expr_list_e SEMICOLON
   39           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   40           | . expr_10 SEMICOLON
   41           | . decl_var
   45 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   46                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . matched_if_stmt
   47                | . other_stmt
   48 open_if_stmt: . IF condition if_stmt
   49             | . IF condition matched_if_stmt ELSE open_if_stmt
   50             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   50             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . open_if_stmt
   57 expr_10: . expr_9 EQUALS expr_10
   58        | . expr_9 QUESTION expr_10 COLON expr_10
   59        | . expr_9
   60 expr_9: . expr_9 OR expr_8
   61       | . expr_8
   62 expr_8: . expr_8 AND expr_7
   63       | . expr_7
   64 expr_7: . expr_7 LT expr_6
   65       | . expr_7 LE expr_6
   66       | . expr_7 EE expr_6
   67       | . expr_7 GE expr_6
   68       | . expr_7 GT expr_6
   69       | . expr_7 NE expr_6
   70       | . expr_6
   71 expr_6: . expr_6 PLUS expr_5
   72       | . expr_6 MINUS expr_5
   73       | . expr_5
   74 expr_5: . expr_5 MULTIPLY expr_4
   75       | . expr_5 DIVIDE expr_4
   76       | . expr_5 REMAINDER expr_4
   77       | . expr_4
   78 expr_4: . expr_3 EXP expr_4
   79       | . expr_3
   80 expr_3: . MINUS expr_3
   81       | . NOT expr_3
   82       | . expr_2
   83 expr_2: . expr_2 INCREMENT
   84       | . expr_2 DECREMENT
   85       | . expr_1
   86 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   87       | . func_call
   88       | . array_subscript
   89       | . atomic
   90 func_call: . ident_name OPEN_PAREN expr_list_e CLOSE_PAREN
   91 ident_name: . IDENTIFIER
   92 array_subscript: . ident_name bracket_set
   99 atomic: . INTEGER_LITERAL
  100       | . BOOLEAN_LITERAL
  101       | . CHAR_LITERAL
  102       | . STRING_LITERAL
  103       | . ident_name
  104       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 123
    IF               shift, and go to state 124
    PRINT            shift, and go to state 125
    RETURN           shift, and go to state 126
    INTEGER_LITERAL  shift, and go to state 29
    BOOLEAN_LITERAL  shift, and go to state 30
    CHAR_LITERAL     shift, and go to state 31
    STRING_LITERAL   shift, and go to state 32
    IDENTIFIER       shift, and go to state 127
    OPEN_PAREN       shift, and go to state 34
    OPEN_CURLY       shift, and go to state 128
    MINUS            shift, and go to state 37
    NOT              shift, and go to state 38

    decl_var         go to state 129
    other_stmt       go to state 131
    matched_if_stmt  go to state 185
    open_if_stmt     go to state 186
    expr_10          go to state 136
    expr_9           go to state 40
    expr_8           go to state 41
    expr_7           go to state 42
    expr_6           go to state 43
    expr_5           go to state 44
    expr_4           go to state 45
    expr_3           go to state 46
    expr_2           go to state 47
    expr_1           go to state 48
    func_call        go to state 49
    ident_name       go to state 50
    array_subscript  go to state 51
    atomic           go to state 52


State 185

   46 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt .

    $default  reduce using rule 46 (matched_if_stmt)


State 186

   50 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt .

    $default  reduce using rule 50 (open_if_stmt)

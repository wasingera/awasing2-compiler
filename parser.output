Terminals unused in grammar

   TOKEN_EOF
   FALSE
   TRUE
   WHILE
   TOKEN_ERROR
   COMMENT


Grammar

    0 $accept: program $end

    1 program: decl_list
    2        | %empty

    3 decl_list: decl_var decl_list
    4          | decl_func decl_list
    5          | decl_var
    6          | decl_func

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON
    8         | IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON

   11 type_func: INTEGER
   12          | BOOLEAN
   13          | CHAR
   14          | STRING
   15          | VOID
   16          | FUNCTION

   17 param_list_e: param_list
   18             | %empty

   19 param_list: IDENTIFIER COLON type_param COMMA param_list
   20           | IDENTIFIER COLON type_param

   21 type_param: INTEGER
   22           | BOOLEAN
   23           | CHAR
   24           | STRING
   25           | AUTO
   26           | FUNCTION
   27           | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_param
   28           | ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

   29 type_var: INTEGER
   30         | BOOLEAN
   31         | CHAR
   32         | STRING
   33         | AUTO
   34         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

   35 stmt: if_stmt

   36 other_stmt: RETURN expr_or_e SEMICOLON
   37           | PRINT expr_list_e SEMICOLON
   38           | OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | expr_10 SEMICOLON
   40           | decl_var

   41 condition: OPEN_PAREN expr_10 CLOSE_PAREN

   42 if_stmt: matched_if_stmt
   43        | open_if_stmt

   44 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt
   45                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | other_stmt

   47 open_if_stmt: IF condition if_stmt
   48             | IF condition matched_if_stmt ELSE open_if_stmt
   49             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

   50 expr_or_e: expr_10
   51          | %empty

   52 stmt_list_e: stmt_list
   53            | %empty

   54 stmt_list: stmt stmt_list
   55          | stmt

   56 expr_10: expr_9 EQUALS expr_10
   57        | expr_9 QUESTION expr_10 COLON expr_10
   58        | expr_9

   59 expr_9: expr_9 OR expr_8
   60       | expr_8

   61 expr_8: expr_8 AND expr_7
   62       | expr_7

   63 expr_7: expr_7 LT expr_6
   64       | expr_7 LE expr_6
   65       | expr_7 EE expr_6
   66       | expr_7 GE expr_6
   67       | expr_7 GT expr_6
   68       | expr_7 NE expr_6
   69       | expr_6

   70 expr_6: expr_6 PLUS expr_5
   71       | expr_6 MINUS expr_5
   72       | expr_5

   73 expr_5: expr_5 MULTIPLY expr_4
   74       | expr_5 DIVIDE expr_4
   75       | expr_5 REMAINDER expr_4
   76       | expr_4

   77 expr_4: expr_3 EXP expr_4
   78       | expr_3

   79 expr_3: MINUS expr_3
   80       | NOT expr_3
   81       | expr_2

   82 expr_2: expr_2 INCREMENT
   83       | expr_2 DECREMENT
   84       | expr_1

   85 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN
   86       | func_call
   87       | array_subscript
   88       | atomic

   89 func_call: IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN

   90 array_subscript: IDENTIFIER bracket_set

   91 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   92            | OPEN_SQUARE expr_10 CLOSE_SQUARE

   93 expr_list_e: expr_list
   94            | %empty

   95 expr_list: expr_10 COMMA expr_list
   96          | expr_10

   97 atomic: INTEGER_LITERAL
   98       | BOOLEAN_LITERAL
   99       | CHAR_LITERAL
  100       | STRING_LITERAL
  101       | IDENTIFIER
  102       | OPEN_CURLY expr_list CLOSE_CURLY


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259) 27 28 34
AUTO (260) 25 33
BOOLEAN (261) 12 22 30
CHAR (262) 13 23 31
ELSE (263) 44 48
FALSE (264)
FOR (265) 45 49
FUNCTION (266) 9 10 16 26
IF (267) 44 47 48
INTEGER (268) 11 21 29
PRINT (269) 37
RETURN (270) 36
STRING (271) 14 24 32
TRUE (272)
VOID (273) 15
WHILE (274)
INTEGER_LITERAL (275) 97
BOOLEAN_LITERAL (276) 98
CHAR_LITERAL (277) 99
STRING_LITERAL (278) 100
IDENTIFIER (279) 7 8 9 10 19 20 89 90 101
TOKEN_ERROR (280)
COMMENT (281)
SEMICOLON (282) 7 8 10 36 37 39 45 49
COLON (283) 7 8 9 10 19 20 57
QUESTION (284) 57
EQUALS (285) 8 9 56
GT (286) 67
GE (287) 66
LT (288) 63
LE (289) 64
EE (290) 65
NE (291) 68
AND (292) 61
OR (293) 59
INCREMENT (294) 82
DECREMENT (295) 83
OPEN_PAREN (296) 9 10 41 45 49 85 89
CLOSE_PAREN (297) 9 10 41 45 49 85 89
OPEN_SQUARE (298) 27 28 34 91 92
CLOSE_SQUARE (299) 27 28 34 91 92
OPEN_CURLY (300) 9 38 102
CLOSE_CURLY (301) 9 38 102
PLUS (302) 70
MINUS (303) 71 79
MULTIPLY (304) 73
DIVIDE (305) 74
REMAINDER (306) 75
EXP (307) 77
NOT (308) 80
COMMA (309) 19 95


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0
decl_list (57)
    on left: 3 4 5 6, on right: 1 3 4
decl_var (58)
    on left: 7 8, on right: 3 5 40
decl_func (59)
    on left: 9 10, on right: 4 6
type_func (60)
    on left: 11 12 13 14 15 16, on right: 9 10
param_list_e (61)
    on left: 17 18, on right: 9 10
param_list (62)
    on left: 19 20, on right: 17 19
type_param (63)
    on left: 21 22 23 24 25 26 27 28, on right: 19 20 27 28
type_var (64)
    on left: 29 30 31 32 33 34, on right: 7 8 34
stmt (65)
    on left: 35, on right: 54 55
other_stmt (66)
    on left: 36 37 38 39 40, on right: 46
condition (67)
    on left: 41, on right: 44 47 48
if_stmt (68)
    on left: 42 43, on right: 35 47
matched_if_stmt (69)
    on left: 44 45 46, on right: 42 44 45 48
open_if_stmt (70)
    on left: 47 48 49, on right: 43 48 49
expr_or_e (71)
    on left: 50 51, on right: 36 45 49
stmt_list_e (72)
    on left: 52 53, on right: 38
stmt_list (73)
    on left: 54 55, on right: 9 52 54
expr_10 (74)
    on left: 56 57 58, on right: 8 27 34 39 41 50 56 57 85 91 92 95
    96
expr_9 (75)
    on left: 59 60, on right: 56 57 58 59
expr_8 (76)
    on left: 61 62, on right: 59 60 61
expr_7 (77)
    on left: 63 64 65 66 67 68 69, on right: 61 62 63 64 65 66 67 68
expr_6 (78)
    on left: 70 71 72, on right: 63 64 65 66 67 68 69 70 71
expr_5 (79)
    on left: 73 74 75 76, on right: 70 71 72 73 74 75
expr_4 (80)
    on left: 77 78, on right: 73 74 75 76 77
expr_3 (81)
    on left: 79 80 81, on right: 77 78 79 80
expr_2 (82)
    on left: 82 83 84, on right: 81 82 83
expr_1 (83)
    on left: 85 86 87 88, on right: 84
func_call (84)
    on left: 89, on right: 86
array_subscript (85)
    on left: 90, on right: 87
bracket_set (86)
    on left: 91 92, on right: 90 91
expr_list_e (87)
    on left: 93 94, on right: 37 89
expr_list (88)
    on left: 95 96, on right: 93 95 102
atomic (89)
    on left: 97 98 99 100 101 102, on right: 88


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2        | . %empty  [$end]
    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | . IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program    go to state 2
    decl_list  go to state 3
    decl_var   go to state 4
    decl_func  go to state 5


State 1

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER . COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER . COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON

    COLON  shift, and go to state 6


State 2

    0 $accept: program . $end

    $end  shift, and go to state 7


State 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


State 4

    3 decl_list: . decl_var decl_list
    3          | decl_var . decl_list
    4          | . decl_func decl_list
    5          | . decl_var
    5          | decl_var .  [$end]
    6          | . decl_func
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | . IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 5 (decl_list)

    decl_list  go to state 8
    decl_var   go to state 4
    decl_func  go to state 5


State 5

    3 decl_list: . decl_var decl_list
    4          | . decl_func decl_list
    4          | decl_func . decl_list
    5          | . decl_var
    6          | . decl_func
    6          | decl_func .  [$end]
    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: . IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | . IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 6 (decl_list)

    decl_list  go to state 9
    decl_var   go to state 4
    decl_func  go to state 5


State 6

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER COLON . FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON . FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON
   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    ARRAY     shift, and go to state 10
    AUTO      shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    CHAR      shift, and go to state 13
    FUNCTION  shift, and go to state 14
    INTEGER   shift, and go to state 15
    STRING    shift, and go to state 16

    type_var  go to state 17


State 7

    0 $accept: program $end .

    $default  accept


State 8

    3 decl_list: decl_var decl_list .

    $default  reduce using rule 3 (decl_list)


State 9

    4 decl_list: decl_func decl_list .

    $default  reduce using rule 4 (decl_list)


State 10

   34 type_var: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    OPEN_SQUARE  shift, and go to state 18


State 11

   33 type_var: AUTO .

    $default  reduce using rule 33 (type_var)


State 12

   30 type_var: BOOLEAN .

    $default  reduce using rule 30 (type_var)


State 13

   31 type_var: CHAR .

    $default  reduce using rule 31 (type_var)


State 14

    9 decl_func: IDENTIFIER COLON FUNCTION . type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON FUNCTION . type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON
   11 type_func: . INTEGER
   12          | . BOOLEAN
   13          | . CHAR
   14          | . STRING
   15          | . VOID
   16          | . FUNCTION

    BOOLEAN   shift, and go to state 19
    CHAR      shift, and go to state 20
    FUNCTION  shift, and go to state 21
    INTEGER   shift, and go to state 22
    STRING    shift, and go to state 23
    VOID      shift, and go to state 24

    type_func  go to state 25


State 15

   29 type_var: INTEGER .

    $default  reduce using rule 29 (type_var)


State 16

   32 type_var: STRING .

    $default  reduce using rule 32 (type_var)


State 17

    7 decl_var: IDENTIFIER COLON type_var . SEMICOLON
    8         | IDENTIFIER COLON type_var . EQUALS expr_10 SEMICOLON

    SEMICOLON  shift, and go to state 26
    EQUALS     shift, and go to state 27


State 18

   34 type_var: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_var
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 37
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 19

   12 type_func: BOOLEAN .

    $default  reduce using rule 12 (type_func)


State 20

   13 type_func: CHAR .

    $default  reduce using rule 13 (type_func)


State 21

   16 type_func: FUNCTION .

    $default  reduce using rule 16 (type_func)


State 22

   11 type_func: INTEGER .

    $default  reduce using rule 11 (type_func)


State 23

   14 type_func: STRING .

    $default  reduce using rule 14 (type_func)


State 24

   15 type_func: VOID .

    $default  reduce using rule 15 (type_func)


State 25

    9 decl_func: IDENTIFIER COLON FUNCTION type_func . OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON FUNCTION type_func . OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON

    OPEN_PAREN  shift, and go to state 50


State 26

    7 decl_var: IDENTIFIER COLON type_var SEMICOLON .

    $default  reduce using rule 7 (decl_var)


State 27

    8 decl_var: IDENTIFIER COLON type_var EQUALS . expr_10 SEMICOLON
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 51
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 28

   97 atomic: INTEGER_LITERAL .

    $default  reduce using rule 97 (atomic)


State 29

   98 atomic: BOOLEAN_LITERAL .

    $default  reduce using rule 98 (atomic)


State 30

   99 atomic: CHAR_LITERAL .

    $default  reduce using rule 99 (atomic)


State 31

  100 atomic: STRING_LITERAL .

    $default  reduce using rule 100 (atomic)


State 32

   89 func_call: IDENTIFIER . OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: IDENTIFIER . bracket_set
   91 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   92            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  101 atomic: IDENTIFIER .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_PAREN   shift, and go to state 52
    OPEN_SQUARE  shift, and go to state 53

    $default  reduce using rule 101 (atomic)

    bracket_set  go to state 54


State 33

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   85       | OPEN_PAREN . expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 55
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 34

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   95 expr_list: . expr_10 COMMA expr_list
   96          | . expr_10
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY
  102       | OPEN_CURLY . expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 56
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    expr_list        go to state 57
    atomic           go to state 49


State 35

   79 expr_3: . MINUS expr_3
   79       | MINUS . expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_3           go to state 58
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 36

   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   80       | NOT . expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_3           go to state 59
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 37

   34 type_var: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_var

    CLOSE_SQUARE  shift, and go to state 60


State 38

   56 expr_10: expr_9 . EQUALS expr_10
   57        | expr_9 . QUESTION expr_10 COLON expr_10
   58        | expr_9 .  [SEMICOLON, COLON, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   59 expr_9: expr_9 . OR expr_8

    QUESTION  shift, and go to state 61
    EQUALS    shift, and go to state 62
    OR        shift, and go to state 63

    $default  reduce using rule 58 (expr_10)


State 39

   60 expr_9: expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   61 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 64

    $default  reduce using rule 60 (expr_9)


State 40

   62 expr_8: expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   63 expr_7: expr_7 . LT expr_6
   64       | expr_7 . LE expr_6
   65       | expr_7 . EE expr_6
   66       | expr_7 . GE expr_6
   67       | expr_7 . GT expr_6
   68       | expr_7 . NE expr_6

    GT  shift, and go to state 65
    GE  shift, and go to state 66
    LT  shift, and go to state 67
    LE  shift, and go to state 68
    EE  shift, and go to state 69
    NE  shift, and go to state 70

    $default  reduce using rule 62 (expr_8)


State 41

   69 expr_7: expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 69 (expr_7)


State 42

   72 expr_6: expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   73 expr_5: expr_5 . MULTIPLY expr_4
   74       | expr_5 . DIVIDE expr_4
   75       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 73
    DIVIDE     shift, and go to state 74
    REMAINDER  shift, and go to state 75

    $default  reduce using rule 72 (expr_6)


State 43

   76 expr_5: expr_4 .

    $default  reduce using rule 76 (expr_5)


State 44

   77 expr_4: expr_3 . EXP expr_4
   78       | expr_3 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, COMMA]

    EXP  shift, and go to state 76

    $default  reduce using rule 78 (expr_4)


State 45

   81 expr_3: expr_2 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]
   82 expr_2: expr_2 . INCREMENT
   83       | expr_2 . DECREMENT

    INCREMENT  shift, and go to state 77
    DECREMENT  shift, and go to state 78

    $default  reduce using rule 81 (expr_3)


State 46

   84 expr_2: expr_1 .

    $default  reduce using rule 84 (expr_2)


State 47

   86 expr_1: func_call .

    $default  reduce using rule 86 (expr_1)


State 48

   87 expr_1: array_subscript .

    $default  reduce using rule 87 (expr_1)


State 49

   88 expr_1: atomic .

    $default  reduce using rule 88 (expr_1)


State 50

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN . param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON FUNCTION type_func OPEN_PAREN . param_list_e CLOSE_PAREN SEMICOLON
   17 param_list_e: . param_list
   18             | . %empty  [CLOSE_PAREN]
   19 param_list: . IDENTIFIER COLON type_param COMMA param_list
   20           | . IDENTIFIER COLON type_param

    IDENTIFIER  shift, and go to state 79

    $default  reduce using rule 18 (param_list_e)

    param_list_e  go to state 80
    param_list    go to state 81


State 51

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 82


State 52

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   89          | IDENTIFIER OPEN_PAREN . expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   93 expr_list_e: . expr_list
   94            | . %empty  [CLOSE_PAREN]
   95 expr_list: . expr_10 COMMA expr_list
   96          | . expr_10
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 94 (expr_list_e)

    expr_10          go to state 56
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    expr_list_e      go to state 83
    expr_list        go to state 84
    atomic           go to state 49


State 53

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   91 bracket_set: OPEN_SQUARE . expr_10 CLOSE_SQUARE bracket_set
   92            | OPEN_SQUARE . expr_10 CLOSE_SQUARE
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 85
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 54

   90 array_subscript: IDENTIFIER bracket_set .

    $default  reduce using rule 90 (array_subscript)


State 55

   85 expr_1: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 86


State 56

   95 expr_list: expr_10 . COMMA expr_list
   96          | expr_10 .  [SEMICOLON, CLOSE_PAREN, CLOSE_CURLY]

    COMMA  shift, and go to state 87

    $default  reduce using rule 96 (expr_list)


State 57

  102 atomic: OPEN_CURLY expr_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 88


State 58

   79 expr_3: MINUS expr_3 .

    $default  reduce using rule 79 (expr_3)


State 59

   80 expr_3: NOT expr_3 .

    $default  reduce using rule 80 (expr_3)


State 60

   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var
   34         | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 89


State 61

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   57        | expr_9 QUESTION . expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 90
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 62

   56 expr_10: . expr_9 EQUALS expr_10
   56        | expr_9 EQUALS . expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 91
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 63

   59 expr_9: expr_9 OR . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_8           go to state 92
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 64

   61 expr_8: expr_8 AND . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_7           go to state 93
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 65

   67 expr_7: expr_7 GT . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_6           go to state 94
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 66

   66 expr_7: expr_7 GE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_6           go to state 95
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 67

   63 expr_7: expr_7 LT . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_6           go to state 96
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 68

   64 expr_7: expr_7 LE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_6           go to state 97
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 69

   65 expr_7: expr_7 EE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_6           go to state 98
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 70

   68 expr_7: expr_7 NE . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_6           go to state 99
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 71

   70 expr_6: expr_6 PLUS . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_5           go to state 100
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 72

   71 expr_6: expr_6 MINUS . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_5           go to state 101
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 73

   73 expr_5: expr_5 MULTIPLY . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_4           go to state 102
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 74

   74 expr_5: expr_5 DIVIDE . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_4           go to state 103
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 75

   75 expr_5: expr_5 REMAINDER . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_4           go to state 104
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 76

   77 expr_4: . expr_3 EXP expr_4
   77       | expr_3 EXP . expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_4           go to state 105
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 77

   82 expr_2: expr_2 INCREMENT .

    $default  reduce using rule 82 (expr_2)


State 78

   83 expr_2: expr_2 DECREMENT .

    $default  reduce using rule 83 (expr_2)


State 79

   19 param_list: IDENTIFIER . COLON type_param COMMA param_list
   20           | IDENTIFIER . COLON type_param

    COLON  shift, and go to state 106


State 80

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e . CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN  shift, and go to state 107


State 81

   17 param_list_e: param_list .

    $default  reduce using rule 17 (param_list_e)


State 82

    8 decl_var: IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON .

    $default  reduce using rule 8 (decl_var)


State 83

   89 func_call: IDENTIFIER OPEN_PAREN expr_list_e . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 108


State 84

   93 expr_list_e: expr_list .

    $default  reduce using rule 93 (expr_list_e)


State 85

   91 bracket_set: OPEN_SQUARE expr_10 . CLOSE_SQUARE bracket_set
   92            | OPEN_SQUARE expr_10 . CLOSE_SQUARE

    CLOSE_SQUARE  shift, and go to state 109


State 86

   85 expr_1: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 85 (expr_1)


State 87

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   95 expr_list: . expr_10 COMMA expr_list
   95          | expr_10 COMMA . expr_list
   96          | . expr_10
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 56
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    expr_list        go to state 110
    atomic           go to state 49


State 88

  102 atomic: OPEN_CURLY expr_list CLOSE_CURLY .

    $default  reduce using rule 102 (atomic)


State 89

   34 type_var: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var .

    $default  reduce using rule 34 (type_var)


State 90

   57 expr_10: expr_9 QUESTION expr_10 . COLON expr_10

    COLON  shift, and go to state 111


State 91

   56 expr_10: expr_9 EQUALS expr_10 .

    $default  reduce using rule 56 (expr_10)


State 92

   59 expr_9: expr_9 OR expr_8 .  [SEMICOLON, COLON, QUESTION, EQUALS, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   61 expr_8: expr_8 . AND expr_7

    AND  shift, and go to state 64

    $default  reduce using rule 59 (expr_9)


State 93

   61 expr_8: expr_8 AND expr_7 .  [SEMICOLON, COLON, QUESTION, EQUALS, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   63 expr_7: expr_7 . LT expr_6
   64       | expr_7 . LE expr_6
   65       | expr_7 . EE expr_6
   66       | expr_7 . GE expr_6
   67       | expr_7 . GT expr_6
   68       | expr_7 . NE expr_6

    GT  shift, and go to state 65
    GE  shift, and go to state 66
    LT  shift, and go to state 67
    LE  shift, and go to state 68
    EE  shift, and go to state 69
    NE  shift, and go to state 70

    $default  reduce using rule 61 (expr_8)


State 94

   67 expr_7: expr_7 GT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 67 (expr_7)


State 95

   66 expr_7: expr_7 GE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 66 (expr_7)


State 96

   63 expr_7: expr_7 LT expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 63 (expr_7)


State 97

   64 expr_7: expr_7 LE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 64 (expr_7)


State 98

   65 expr_7: expr_7 EE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 65 (expr_7)


State 99

   68 expr_7: expr_7 NE expr_6 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, COMMA]
   70 expr_6: expr_6 . PLUS expr_5
   71       | expr_6 . MINUS expr_5

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72

    $default  reduce using rule 68 (expr_7)


State 100

   70 expr_6: expr_6 PLUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   73 expr_5: expr_5 . MULTIPLY expr_4
   74       | expr_5 . DIVIDE expr_4
   75       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 73
    DIVIDE     shift, and go to state 74
    REMAINDER  shift, and go to state 75

    $default  reduce using rule 70 (expr_6)


State 101

   71 expr_6: expr_6 MINUS expr_5 .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, COMMA]
   73 expr_5: expr_5 . MULTIPLY expr_4
   74       | expr_5 . DIVIDE expr_4
   75       | expr_5 . REMAINDER expr_4

    MULTIPLY   shift, and go to state 73
    DIVIDE     shift, and go to state 74
    REMAINDER  shift, and go to state 75

    $default  reduce using rule 71 (expr_6)


State 102

   73 expr_5: expr_5 MULTIPLY expr_4 .

    $default  reduce using rule 73 (expr_5)


State 103

   74 expr_5: expr_5 DIVIDE expr_4 .

    $default  reduce using rule 74 (expr_5)


State 104

   75 expr_5: expr_5 REMAINDER expr_4 .

    $default  reduce using rule 75 (expr_5)


State 105

   77 expr_4: expr_3 EXP expr_4 .

    $default  reduce using rule 77 (expr_4)


State 106

   19 param_list: IDENTIFIER COLON . type_param COMMA param_list
   20           | IDENTIFIER COLON . type_param
   21 type_param: . INTEGER
   22           | . BOOLEAN
   23           | . CHAR
   24           | . STRING
   25           | . AUTO
   26           | . FUNCTION
   27           | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_param
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

    ARRAY     shift, and go to state 112
    AUTO      shift, and go to state 113
    BOOLEAN   shift, and go to state 114
    CHAR      shift, and go to state 115
    FUNCTION  shift, and go to state 116
    INTEGER   shift, and go to state 117
    STRING    shift, and go to state 118

    type_param  go to state 119


State 107

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN . EQUALS OPEN_CURLY stmt_list CLOSE_CURLY
   10          | IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 120
    EQUALS     shift, and go to state 121


State 108

   89 func_call: IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN .

    $default  reduce using rule 89 (func_call)


State 109

   91 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   91            | OPEN_SQUARE expr_10 CLOSE_SQUARE . bracket_set
   92            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
   92            | OPEN_SQUARE expr_10 CLOSE_SQUARE .  [SEMICOLON, COLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    OPEN_SQUARE  shift, and go to state 53

    $default  reduce using rule 92 (bracket_set)

    bracket_set  go to state 122


State 110

   95 expr_list: expr_10 COMMA expr_list .

    $default  reduce using rule 95 (expr_list)


State 111

   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   57        | expr_9 QUESTION expr_10 COLON . expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 123
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 112

   27 type_param: ARRAY . OPEN_SQUARE expr_10 CLOSE_SQUARE type_param
   28           | ARRAY . OPEN_SQUARE CLOSE_SQUARE type_param

    OPEN_SQUARE  shift, and go to state 124


State 113

   25 type_param: AUTO .

    $default  reduce using rule 25 (type_param)


State 114

   22 type_param: BOOLEAN .

    $default  reduce using rule 22 (type_param)


State 115

   23 type_param: CHAR .

    $default  reduce using rule 23 (type_param)


State 116

   26 type_param: FUNCTION .

    $default  reduce using rule 26 (type_param)


State 117

   21 type_param: INTEGER .

    $default  reduce using rule 21 (type_param)


State 118

   24 type_param: STRING .

    $default  reduce using rule 24 (type_param)


State 119

   19 param_list: IDENTIFIER COLON type_param . COMMA param_list
   20           | IDENTIFIER COLON type_param .  [CLOSE_PAREN]

    COMMA  shift, and go to state 125

    $default  reduce using rule 20 (param_list)


State 120

   10 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN SEMICOLON .

    $default  reduce using rule 10 (decl_func)


State 121

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS . OPEN_CURLY stmt_list CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 126


State 122

   91 bracket_set: OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set .

    $default  reduce using rule 91 (bracket_set)


State 123

   57 expr_10: expr_9 QUESTION expr_10 COLON expr_10 .

    $default  reduce using rule 57 (expr_10)


State 124

   27 type_param: ARRAY OPEN_SQUARE . expr_10 CLOSE_SQUARE type_param
   28           | ARRAY OPEN_SQUARE . CLOSE_SQUARE type_param
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    CLOSE_SQUARE     shift, and go to state 127
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 128
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 125

   19 param_list: . IDENTIFIER COLON type_param COMMA param_list
   19           | IDENTIFIER COLON type_param COMMA . param_list
   20           | . IDENTIFIER COLON type_param

    IDENTIFIER  shift, and go to state 79

    param_list  go to state 129


State 126

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY . stmt_list CLOSE_CURLY
   35 stmt: . if_stmt
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   54 stmt_list: . stmt stmt_list
   55          | . stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 130
    IF               shift, and go to state 131
    PRINT            shift, and go to state 132
    RETURN           shift, and go to state 133
    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 134
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 135
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    decl_var         go to state 136
    stmt             go to state 137
    other_stmt       go to state 138
    if_stmt          go to state 139
    matched_if_stmt  go to state 140
    open_if_stmt     go to state 141
    stmt_list        go to state 142
    expr_10          go to state 143
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 127

   21 type_param: . INTEGER
   22           | . BOOLEAN
   23           | . CHAR
   24           | . STRING
   25           | . AUTO
   26           | . FUNCTION
   27           | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_param
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param
   28           | ARRAY OPEN_SQUARE CLOSE_SQUARE . type_param

    ARRAY     shift, and go to state 112
    AUTO      shift, and go to state 113
    BOOLEAN   shift, and go to state 114
    CHAR      shift, and go to state 115
    FUNCTION  shift, and go to state 116
    INTEGER   shift, and go to state 117
    STRING    shift, and go to state 118

    type_param  go to state 144


State 128

   27 type_param: ARRAY OPEN_SQUARE expr_10 . CLOSE_SQUARE type_param

    CLOSE_SQUARE  shift, and go to state 145


State 129

   19 param_list: IDENTIFIER COLON type_param COMMA param_list .

    $default  reduce using rule 19 (param_list)


State 130

   45 matched_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR . OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    OPEN_PAREN  shift, and go to state 146


State 131

   41 condition: . OPEN_PAREN expr_10 CLOSE_PAREN
   44 matched_if_stmt: IF . condition matched_if_stmt ELSE matched_if_stmt
   47 open_if_stmt: IF . condition if_stmt
   48             | IF . condition matched_if_stmt ELSE open_if_stmt

    OPEN_PAREN  shift, and go to state 147

    condition  go to state 148


State 132

   37 other_stmt: PRINT . expr_list_e SEMICOLON
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   93 expr_list_e: . expr_list
   94            | . %empty  [SEMICOLON]
   95 expr_list: . expr_10 COMMA expr_list
   96          | . expr_10
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 94 (expr_list_e)

    expr_10          go to state 56
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    expr_list_e      go to state 149
    expr_list        go to state 84
    atomic           go to state 49


State 133

   36 other_stmt: RETURN . expr_or_e SEMICOLON
   50 expr_or_e: . expr_10
   51          | . %empty  [SEMICOLON]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 150
    expr_10          go to state 151
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 134

    7 decl_var: IDENTIFIER . COLON type_var SEMICOLON
    8         | IDENTIFIER . COLON type_var EQUALS expr_10 SEMICOLON
   89 func_call: IDENTIFIER . OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: IDENTIFIER . bracket_set
   91 bracket_set: . OPEN_SQUARE expr_10 CLOSE_SQUARE bracket_set
   92            | . OPEN_SQUARE expr_10 CLOSE_SQUARE
  101 atomic: IDENTIFIER .  [SEMICOLON, QUESTION, EQUALS, GT, GE, LT, LE, EE, NE, AND, OR, INCREMENT, DECREMENT, CLOSE_CURLY, PLUS, MINUS, MULTIPLY, DIVIDE, REMAINDER, EXP, COMMA]

    COLON        shift, and go to state 152
    OPEN_PAREN   shift, and go to state 52
    OPEN_SQUARE  shift, and go to state 53

    $default  reduce using rule 101 (atomic)

    bracket_set  go to state 54


State 135

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   35 stmt: . if_stmt
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   38           | OPEN_CURLY . stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   52 stmt_list_e: . stmt_list
   53            | . %empty  [CLOSE_CURLY]
   54 stmt_list: . stmt stmt_list
   55          | . stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   95 expr_list: . expr_10 COMMA expr_list
   96          | . expr_10
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY
  102       | OPEN_CURLY . expr_list CLOSE_CURLY

    FOR              shift, and go to state 130
    IF               shift, and go to state 131
    PRINT            shift, and go to state 132
    RETURN           shift, and go to state 133
    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 134
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 135
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 53 (stmt_list_e)

    decl_var         go to state 136
    stmt             go to state 137
    other_stmt       go to state 138
    if_stmt          go to state 139
    matched_if_stmt  go to state 140
    open_if_stmt     go to state 141
    stmt_list_e      go to state 153
    stmt_list        go to state 154
    expr_10          go to state 155
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    expr_list        go to state 57
    atomic           go to state 49


State 136

   40 other_stmt: decl_var .

    $default  reduce using rule 40 (other_stmt)


State 137

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   35 stmt: . if_stmt
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   54 stmt_list: . stmt stmt_list
   54          | stmt . stmt_list
   55          | . stmt
   55          | stmt .  [CLOSE_CURLY]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 130
    IF               shift, and go to state 131
    PRINT            shift, and go to state 132
    RETURN           shift, and go to state 133
    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 134
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 135
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 55 (stmt_list)

    decl_var         go to state 136
    stmt             go to state 137
    other_stmt       go to state 138
    if_stmt          go to state 139
    matched_if_stmt  go to state 140
    open_if_stmt     go to state 141
    stmt_list        go to state 156
    expr_10          go to state 143
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 138

   46 matched_if_stmt: other_stmt .

    $default  reduce using rule 46 (matched_if_stmt)


State 139

   35 stmt: if_stmt .

    $default  reduce using rule 35 (stmt)


State 140

   42 if_stmt: matched_if_stmt .

    $default  reduce using rule 42 (if_stmt)


State 141

   43 if_stmt: open_if_stmt .

    $default  reduce using rule 43 (if_stmt)


State 142

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 157


State 143

   39 other_stmt: expr_10 . SEMICOLON

    SEMICOLON  shift, and go to state 158


State 144

   28 type_param: ARRAY OPEN_SQUARE CLOSE_SQUARE type_param .

    $default  reduce using rule 28 (type_param)


State 145

   21 type_param: . INTEGER
   22           | . BOOLEAN
   23           | . CHAR
   24           | . STRING
   25           | . AUTO
   26           | . FUNCTION
   27           | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_param
   27           | ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE . type_param
   28           | . ARRAY OPEN_SQUARE CLOSE_SQUARE type_param

    ARRAY     shift, and go to state 112
    AUTO      shift, and go to state 113
    BOOLEAN   shift, and go to state 114
    CHAR      shift, and go to state 115
    FUNCTION  shift, and go to state 116
    INTEGER   shift, and go to state 117
    STRING    shift, and go to state 118

    type_param  go to state 159


State 146

   45 matched_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN . expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   50 expr_or_e: . expr_10
   51          | . %empty  [SEMICOLON]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 160
    expr_10          go to state 151
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 147

   41 condition: OPEN_PAREN . expr_10 CLOSE_PAREN
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    expr_10          go to state 161
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 148

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   42 if_stmt: . matched_if_stmt
   43        | . open_if_stmt
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   44                | IF condition . matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   47             | IF condition . if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   48             | IF condition . matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 130
    IF               shift, and go to state 131
    PRINT            shift, and go to state 132
    RETURN           shift, and go to state 133
    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 134
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 135
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    decl_var         go to state 136
    other_stmt       go to state 138
    if_stmt          go to state 162
    matched_if_stmt  go to state 163
    open_if_stmt     go to state 141
    expr_10          go to state 143
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 149

   37 other_stmt: PRINT expr_list_e . SEMICOLON

    SEMICOLON  shift, and go to state 164


State 150

   36 other_stmt: RETURN expr_or_e . SEMICOLON

    SEMICOLON  shift, and go to state 165


State 151

   50 expr_or_e: expr_10 .

    $default  reduce using rule 50 (expr_or_e)


State 152

    7 decl_var: IDENTIFIER COLON . type_var SEMICOLON
    8         | IDENTIFIER COLON . type_var EQUALS expr_10 SEMICOLON
   29 type_var: . INTEGER
   30         | . BOOLEAN
   31         | . CHAR
   32         | . STRING
   33         | . AUTO
   34         | . ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_var

    ARRAY    shift, and go to state 10
    AUTO     shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    CHAR     shift, and go to state 13
    INTEGER  shift, and go to state 15
    STRING   shift, and go to state 16

    type_var  go to state 17


State 153

   38 other_stmt: OPEN_CURLY stmt_list_e . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 166


State 154

   52 stmt_list_e: stmt_list .

    $default  reduce using rule 52 (stmt_list_e)


State 155

   39 other_stmt: expr_10 . SEMICOLON
   95 expr_list: expr_10 . COMMA expr_list
   96          | expr_10 .  [CLOSE_CURLY]

    SEMICOLON  shift, and go to state 158
    COMMA      shift, and go to state 87

    $default  reduce using rule 96 (expr_list)


State 156

   54 stmt_list: stmt stmt_list .

    $default  reduce using rule 54 (stmt_list)


State 157

    9 decl_func: IDENTIFIER COLON FUNCTION type_func OPEN_PAREN param_list_e CLOSE_PAREN EQUALS OPEN_CURLY stmt_list CLOSE_CURLY .

    $default  reduce using rule 9 (decl_func)


State 158

   39 other_stmt: expr_10 SEMICOLON .

    $default  reduce using rule 39 (other_stmt)


State 159

   27 type_param: ARRAY OPEN_SQUARE expr_10 CLOSE_SQUARE type_param .

    $default  reduce using rule 27 (type_param)


State 160

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e . SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 167


State 161

   41 condition: OPEN_PAREN expr_10 . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 168


State 162

   47 open_if_stmt: IF condition if_stmt .

    $default  reduce using rule 47 (open_if_stmt)


State 163

   42 if_stmt: matched_if_stmt .  [FOR, IF, PRINT, RETURN, INTEGER_LITERAL, BOOLEAN_LITERAL, CHAR_LITERAL, STRING_LITERAL, IDENTIFIER, OPEN_PAREN, OPEN_CURLY, CLOSE_CURLY, MINUS, NOT]
   44 matched_if_stmt: IF condition matched_if_stmt . ELSE matched_if_stmt
   48 open_if_stmt: IF condition matched_if_stmt . ELSE open_if_stmt

    ELSE  shift, and go to state 169

    $default  reduce using rule 42 (if_stmt)


State 164

   37 other_stmt: PRINT expr_list_e SEMICOLON .

    $default  reduce using rule 37 (other_stmt)


State 165

   36 other_stmt: RETURN expr_or_e SEMICOLON .

    $default  reduce using rule 36 (other_stmt)


State 166

   38 other_stmt: OPEN_CURLY stmt_list_e CLOSE_CURLY .

    $default  reduce using rule 38 (other_stmt)


State 167

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON . expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   50 expr_or_e: . expr_10
   51          | . %empty  [SEMICOLON]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 170
    expr_10          go to state 151
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 168

   41 condition: OPEN_PAREN expr_10 CLOSE_PAREN .

    $default  reduce using rule 41 (condition)


State 169

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   44                | IF condition matched_if_stmt ELSE . matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   48             | IF condition matched_if_stmt ELSE . open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 130
    IF               shift, and go to state 131
    PRINT            shift, and go to state 132
    RETURN           shift, and go to state 133
    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 134
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 135
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    decl_var         go to state 136
    other_stmt       go to state 138
    matched_if_stmt  go to state 171
    open_if_stmt     go to state 172
    expr_10          go to state 143
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 170

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e . SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt

    SEMICOLON  shift, and go to state 173


State 171

   44 matched_if_stmt: IF condition matched_if_stmt ELSE matched_if_stmt .

    $default  reduce using rule 44 (matched_if_stmt)


State 172

   48 open_if_stmt: IF condition matched_if_stmt ELSE open_if_stmt .

    $default  reduce using rule 48 (open_if_stmt)


State 173

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON . expr_or_e CLOSE_PAREN open_if_stmt
   50 expr_or_e: . expr_10
   51          | . %empty  [CLOSE_PAREN]
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 32
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 34
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    $default  reduce using rule 51 (expr_or_e)

    expr_or_e        go to state 174
    expr_10          go to state 151
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 174

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN matched_if_stmt
   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e . CLOSE_PAREN open_if_stmt

    CLOSE_PAREN  shift, and go to state 175


State 175

    7 decl_var: . IDENTIFIER COLON type_var SEMICOLON
    8         | . IDENTIFIER COLON type_var EQUALS expr_10 SEMICOLON
   36 other_stmt: . RETURN expr_or_e SEMICOLON
   37           | . PRINT expr_list_e SEMICOLON
   38           | . OPEN_CURLY stmt_list_e CLOSE_CURLY
   39           | . expr_10 SEMICOLON
   40           | . decl_var
   44 matched_if_stmt: . IF condition matched_if_stmt ELSE matched_if_stmt
   45                | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt
   45                | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . matched_if_stmt
   46                | . other_stmt
   47 open_if_stmt: . IF condition if_stmt
   48             | . IF condition matched_if_stmt ELSE open_if_stmt
   49             | . FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt
   49             | FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN . open_if_stmt
   56 expr_10: . expr_9 EQUALS expr_10
   57        | . expr_9 QUESTION expr_10 COLON expr_10
   58        | . expr_9
   59 expr_9: . expr_9 OR expr_8
   60       | . expr_8
   61 expr_8: . expr_8 AND expr_7
   62       | . expr_7
   63 expr_7: . expr_7 LT expr_6
   64       | . expr_7 LE expr_6
   65       | . expr_7 EE expr_6
   66       | . expr_7 GE expr_6
   67       | . expr_7 GT expr_6
   68       | . expr_7 NE expr_6
   69       | . expr_6
   70 expr_6: . expr_6 PLUS expr_5
   71       | . expr_6 MINUS expr_5
   72       | . expr_5
   73 expr_5: . expr_5 MULTIPLY expr_4
   74       | . expr_5 DIVIDE expr_4
   75       | . expr_5 REMAINDER expr_4
   76       | . expr_4
   77 expr_4: . expr_3 EXP expr_4
   78       | . expr_3
   79 expr_3: . MINUS expr_3
   80       | . NOT expr_3
   81       | . expr_2
   82 expr_2: . expr_2 INCREMENT
   83       | . expr_2 DECREMENT
   84       | . expr_1
   85 expr_1: . OPEN_PAREN expr_10 CLOSE_PAREN
   86       | . func_call
   87       | . array_subscript
   88       | . atomic
   89 func_call: . IDENTIFIER OPEN_PAREN expr_list_e CLOSE_PAREN
   90 array_subscript: . IDENTIFIER bracket_set
   97 atomic: . INTEGER_LITERAL
   98       | . BOOLEAN_LITERAL
   99       | . CHAR_LITERAL
  100       | . STRING_LITERAL
  101       | . IDENTIFIER
  102       | . OPEN_CURLY expr_list CLOSE_CURLY

    FOR              shift, and go to state 130
    IF               shift, and go to state 131
    PRINT            shift, and go to state 132
    RETURN           shift, and go to state 133
    INTEGER_LITERAL  shift, and go to state 28
    BOOLEAN_LITERAL  shift, and go to state 29
    CHAR_LITERAL     shift, and go to state 30
    STRING_LITERAL   shift, and go to state 31
    IDENTIFIER       shift, and go to state 134
    OPEN_PAREN       shift, and go to state 33
    OPEN_CURLY       shift, and go to state 135
    MINUS            shift, and go to state 35
    NOT              shift, and go to state 36

    decl_var         go to state 136
    other_stmt       go to state 138
    matched_if_stmt  go to state 176
    open_if_stmt     go to state 177
    expr_10          go to state 143
    expr_9           go to state 38
    expr_8           go to state 39
    expr_7           go to state 40
    expr_6           go to state 41
    expr_5           go to state 42
    expr_4           go to state 43
    expr_3           go to state 44
    expr_2           go to state 45
    expr_1           go to state 46
    func_call        go to state 47
    array_subscript  go to state 48
    atomic           go to state 49


State 176

   45 matched_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN matched_if_stmt .

    $default  reduce using rule 45 (matched_if_stmt)


State 177

   49 open_if_stmt: FOR OPEN_PAREN expr_or_e SEMICOLON expr_or_e SEMICOLON expr_or_e CLOSE_PAREN open_if_stmt .

    $default  reduce using rule 49 (open_if_stmt)

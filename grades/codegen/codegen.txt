=====STUDENT TESTS=====
====Good Tests====
===[good10.bminor Input]===
s1: string = "first\n";

main: function integer () = {
    s2: string = "second\n";

    print s1, s2;

    temp: string = s1;
    s1 = s2;
    s2 = temp;
    temp = "done\n";

    print s1, s2;
    print temp;

    return 0;
}

===[good10.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
first
second
3`3`done

Expected return code:
0
Actual output:
first
second
3`3`done

Actual return code:
0
Test Passed!
===[good11.bminor Input]===
main: function integer () = {
    print (8 ^ (5 * 3 - (4 + 6)));
    return 0;
}

===[good11.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
32768
Expected return code:
0
Actual output:
32768
Actual return code:
0
Test Passed!
===[good12.bminor Input]===
f: function void (x: integer);

main: function integer () = {
    f(5);

    return 0;
}

f: function void (x: integer) = {
    if (x < 0) return;

    print x, '\n';

    f(x-1);
}

===[good12.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
5
4
3
2
1
0

Expected return code:
0
Actual output:
5
4
3
2
1
0

Actual return code:
0
Test Passed!
===[good13.bminor Input]===
nd: array [6] char = {'h', 'e', 'l', 'l', 'o', '\n'};

print_char_array: function void (a: array [] char) = {
    i: integer;

    for (i = 0; i < 6; i++) {
        print a[i];
    }
}

main: function integer () = {
    print_char_array(nd);

    return 0;
}

===[good13.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
hello

Expected return code:
0
Actual output:
hello

Actual return code:
0
Test Passed!
===[good14.bminor Input]===
main: function integer () = {
    count: integer = 0;
    i: integer;
    for (i = 0; count < 20; i++) {
        if (i % 3 == 0 && i % 5 == 0) {
            print i, " FizzBuzz\n";
            count++;
        } else if (i % 5 == 0) {
            print i, " Buzz\n";
            count++;
        } else if (i % 3 == 0) {
            print i, " Fizz\n";
            count++;
        }
    }

    return 0;
}

===[good14.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
0 FizzBuzz
3 Fizz
5 Buzz
6 Fizz
9 Fizz
10 Buzz
12 Fizz
15 FizzBuzz
18 Fizz
20 Buzz
21 Fizz
24 Fizz
25 Buzz
27 Fizz
30 FizzBuzz
33 Fizz
35 Buzz
36 Fizz
39 Fizz
40 Buzz

Expected return code:
0
Actual output:
0 FizzBuzz
3 Fizz
5 Buzz
6 Fizz
9 Fizz
10 Buzz
12 Fizz
15 FizzBuzz
18 Fizz
20 Buzz
21 Fizz
24 Fizz
25 Buzz
27 Fizz
30 FizzBuzz
33 Fizz
35 Buzz
36 Fizz
39 Fizz
40 Buzz

Actual return code:
0
Test Passed!
===[good15.bminor Input]===
calc: function integer (x: integer, y: integer) = {
    if (x < 0) return 1;

    return calc(x - 1, y) * y;
}

main: function integer () = {
    print calc(6, 7);

    return 0;
}

===[good15.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
823543
Expected return code:
0
Actual output:
823543
Actual return code:
0
Test Passed!
===[good16.bminor Input]===
a: array [4] integer = {1, 2, 3, 4};
i: integer = 1;

main: function integer () = {
    j: integer;
    for (j = 0; j < 4; j++) {
        i = i + 5;
        a[j] = i; 
        print a[j], ' ';
    }

    print '\n';

    return 0;
}

===[good16.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
6 11 16 21 

Expected return code:
0
Actual output:
6 11 16 21 

Actual return code:
0
Test Passed!
===[good17.bminor Input]===
s1: string = " fun and good\n";

f: function void (s: string) = {
    print "I'm printing ", s, "!\n";
}

main: function integer () = {
    s2: string = " money ";
    print "Big", s2, s1;

    f(s1);
    f(s2);
    f("Fun!");

    return 0;
}

===[good17.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
Big money  fun and good
Im printing  fun and good
!
Im printing  money !
Im printing Fun!!

Expected return code:
0
Actual output:
Big money  fun and good
Im printing  fun and good
!
Im printing  money !
Im printing Fun!!

Actual return code:
0
Test Passed!
===[good18.bminor Input]===
f2: function integer (x: integer) = {
    if (x <= 1) return 1;

    return f2(x-1) * x;
}

f: function integer () = {
    return f2(6);
}

main: function integer () = {
    print f();

    return 0;
}

===[good18.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
720
Expected return code:
0
Actual output:
720
Actual return code:
0
Test Passed!
===[good19.bminor Input]===
g: string = "global\n";

f2: function string (s: string) = {
    print "second\n";
    return s;
}

f1: function string (s: string) = {
    print "first\n";
    print f2(s);

    return "done";
}

main: function integer () = {
    f1("test string\n");
    f1(g);

    return 0;
}

===[good19.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
first
second
test string
first
second
global

Expected return code:
0
Actual output:
first
second
test string
first
second
global

Actual return code:
0
Test Passed!
===[good1.bminor Input]===
x: integer = 5;

main: function integer () = {
    y: integer = 5 ^ 5;
    print x + y;

    return 0;
}

===[good1.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
3130
Expected return code:
0
Actual output:
3130
Actual return code:
0
Test Passed!
===[good20.bminor Input]===
a: array [5] integer;

make_array: function void (a: array [] integer, length: integer) = {
    i: integer;
    for (i = 0; i < length; i++) {
        a[i] = i;
    }
}

print_array: function void (a: array [] integer, length: integer) = {
    i: integer;
    for (i = 0; i < length; i++) {
        print a[i], ' ';
    }
}

main: function integer () = {
    make_array(a, 5);
    print_array(a, 5);

    return 0;
}

===[good20.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
-11
Actual output:

Actual return code:
-11
Test Passed!
===[good2.bminor Input]===
main: function integer () = {
    if (true)
        print "good";
    else
        print "false";

    return 0;
}

===[good2.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
good
Expected return code:
0
Actual output:
good
Actual return code:
0
Test Passed!
===[good3.bminor Input]===
a: array [3] integer = {1, 2, 3};

f: function integer(a: array[] integer, i: integer) = {
    return a[i];
}

main: function integer () = {
    print f(a, 1);

    return 0;
}

===[good3.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
2
Expected return code:
0
Actual output:
2
Actual return code:
0
Test Passed!
===[good4.bminor Input]===
a: array[5] integer = {1, 2, 3, 4, 5};

main: function integer () = {
    print a[0], '\n';
    a[0] = 60;

    i: integer;

    for (i = 0; i < 5; i++) {
        print a[i], ' ';
    }

    return 0;
}

===[good4.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
1
60 2 3 4 5 
Expected return code:
0
Actual output:
1
60 2 3 4 5 
Actual return code:
0
Test Passed!
===[good5.bminor Input]===
p: function void();

main: function integer () = {
    p();

    return 0;
}

p: function void() = {
    print "Prototype\n";
}

===[good5.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
Prototype

Expected return code:
0
Actual output:
Prototype

Actual return code:
0
Test Passed!
===[good6.bminor Input]===
s: string = "asdf";
f: function void (s: string, s2: string, s3: string) = {
    print s, ' ', s2, ' ', s3;
}

main: function integer (argc: integer) = {
    s2: string = "fda";
    f(s, s2, "big\n");
}

===[good6.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
asdf fda big

Expected return code:
4
Actual output:
asdf fda big

Actual return code:
4
Test Passed!
===[good7.bminor Input]===
main: function integer (argc: integer) = {
    if (argc > 1)
        print "args passed\n";
    else
        print "no args :(";

    return 0;
}

===[good7.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
no args :(
Expected return code:
0
Actual output:
no args :(
Actual return code:
0
Test Passed!
===[good8.bminor Input]===
main: function integer () = {
    s: string = "asdf";
    if ("asdf" == s)
        print "good\n";

    return 0;
}

===[good8.bminor Compiler Output]===
Successfully generated code
TEST NOT PASSED
Assembly code did not compile to executable
===[good9.bminor Input]===
a: array [2] char = {'a', 'b'};

main: function integer () = {
    if (a[0] == 'a')
        print a[0];

    return 0;
}

===[good9.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
a
Expected return code:
0
Actual output:
a
Actual return code:
0
Test Passed!
=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
strlen: function integer(s: string);
f: function integer(i: integer);

main: function integer () = {
	if (f(strlen("hi")) > strlen("there")) {print "no\n";}
	if (f(f(strlen("hi"))) > strlen("there")) print "ok\n";

	return 0;
}

f: function integer(i: integer) = {
	return i*2;
}

===[good1.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
ok

Expected return code:
0
Actual output:
ok

Actual return code:
0
Test Passed!
===[good11.bminor Input]===
main: function integer () = {
	x: integer = 20;
	y: integer = x;
	{
		x: integer = 10;
		y = y + x;
	}

	{
		{
			y = y + x;
			x: integer = 2;
			y = y + x;
		}
		y = y + x;
		x: integer = 3;
		y = y + x;
	}
	return y + x;
}

===[good11.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
95
Actual output:

Actual return code:
95
Test Passed!
===[good12.bminor Input]===
main: function integer () = {
	return 4 + 9 / (-2 - (-5)) + (((2 + 1) * 4) - 1) % 3 * 7 - 2^3;
}

===[good12.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
13
Actual output:

Actual return code:
13
Test Passed!
===[good13.bminor Input]===
foo_epilogue: function integer () = {
	return 2;
}

foo: function integer ();

main: function integer () = {
	return foo() * 11;
}

main_epilogue: function integer () = {
	return foo_epilogue() + 3;
}

foo: function integer () = {
	return main_epilogue() - 1;
}

===[good13.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
44
Actual output:

Actual return code:
44
Test Passed!
===[good14.bminor Input]===
// https://piazza.com/class/jziupd2lzpm7cy?cid=185

s: string = "no\n";

f: function string() = {
	t: string = s;
	s = "ok\n";
	return t;
}

main: function integer () = {
	print f();
	print s;

	return 0;
}

===[good14.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
0`0`
Expected return code:
0
Actual output:
0`0`
Actual return code:
0
Test Passed!
===[good15.bminor Input]===
// https://piazza.com/class/jziupd2lzpm7cy?cid=179

strdup: function string (s: string);

main: function integer () = {
	a: string = "sssss";
	b: string = strdup(a);
	if (a==b) return 22; else return 11;
}

===[good15.bminor Compiler Output]===
Successfully generated code
TEST NOT PASSED
Assembly code did not compile to executable
===[good16.bminor Input]===
// https://piazza.com/class/jziupd2lzpm7cy?cid=176

f: function void ( x: string ) = 
{
	print x;
}

main: function integer() =
{
	s: string = "hello";
	f(s);
	return 0;
}

===[good16.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
hello
Expected return code:
0
Actual output:
hello
Actual return code:
0
Test Passed!
===[good17.bminor Input]===
a1: integer;
a2: integer = 111;
a3: boolean = false;

A: function integer() = {
	if (a3) return a1 * a2;
	a2: integer = 3;
	if (!!!a3) return a1 + a2;
	return 0;
}

main: function integer() = { return A(); }

===[good17.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
114
Actual output:

Actual return code:
114
Test Passed!
===[good18.bminor Input]===
b1: integer = 3;
b2: integer = 6;
b3: integer = 9;

B: function integer(b3: integer, b4: integer) = {
	print b1 * b2 + b3 % b4;
	print '\n';
	b3 = 37;
	return b3;
}

main: function integer () = {
	print B(5, 3);
	return b3;
}

===[good18.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
20
37
Expected return code:
9
Actual output:
20
37
Actual return code:
9
Test Passed!
===[good2.bminor Input]===
X: array [4] integer = {11, 30, 22, 0};

main: function integer () = {
	i: integer;
	for (i = 0; X[i] != 0; i++)
		print X[i], ' ', X[i] % 3, '\n';

	return 0;
}

===[good2.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
11 2
30 0
22 1

Expected return code:
0
Actual output:
11 2
30 0
22 1

Actual return code:
0
Test Passed!
===[good20.bminor Input]===
D: function integer() = {
	d1: integer = 5;
	d2: integer = d1 + 1; //6
	{
		d3: integer = 9;
		d2: integer = d3 + d1 - 3; //11
		d4: integer = -1;
		d2 = d2 + d3; //20
		print d2 - d4, "\n";
	}
	d4: integer = 16;
	print d2 - d4, '\n';
	{
		d4: integer = -2;
		d3: integer = 1000;
		print d3 + 10;
		print "\n";
		print d4;
		print '\n';
	}
	print d4;
	return 3;
}

main: function integer () = {
	return D();
}

===[good20.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
21
-10
1010
-2
16
Expected return code:
3
Actual output:
21
-10
1010
-2
16
Actual return code:
3
Test Passed!
===[good4.bminor Input]===
collatz: function integer(n: integer, acc: integer) = {
	print n, '\n';
	if (n == 1) return acc;

	if (n % 2 == 0) return collatz(n/2, acc + 1);
	else return collatz(3*n + 1, acc + 1);
}

main:function integer ()=
{
	return collatz(27, 0);
}

===[good4.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
27
82
41
124
62
31
94
47
142
71
214
107
322
161
484
242
121
364
182
91
274
137
412
206
103
310
155
466
233
700
350
175
526
263
790
395
1186
593
1780
890
445
1336
668
334
167
502
251
754
377
1132
566
283
850
425
1276
638
319
958
479
1438
719
2158
1079
3238
1619
4858
2429
7288
3644
1822
911
2734
1367
4102
2051
6154
3077
9232
4616
2308
1154
577
1732
866
433
1300
650
325
976
488
244
122
61
184
92
46
23
70
35
106
53
160
80
40
20
10
5
16
8
4
2
1

Expected return code:
111
Actual output:
27
82
41
124
62
31
94
47
142
71
214
107
322
161
484
242
121
364
182
91
274
137
412
206
103
310
155
466
233
700
350
175
526
263
790
395
1186
593
1780
890
445
1336
668
334
167
502
251
754
377
1132
566
283
850
425
1276
638
319
958
479
1438
719
2158
1079
3238
1619
4858
2429
7288
3644
1822
911
2734
1367
4102
2051
6154
3077
9232
4616
2308
1154
577
1732
866
433
1300
650
325
976
488
244
122
61
184
92
46
23
70
35
106
53
160
80
40
20
10
5
16
8
4
2
1

Actual return code:
111
Test Passed!
===[good5.bminor Input]===
A: function boolean(x: integer, y: integer);
B: function integer(x: char);
C: function char(a: string);

main: function integer() = {
	if (A(B('d') - 1, 10)) {
		x: integer = 3;
		return 2 * B('!') + x;
	}
	return B(C("hello")) % 3;
}

A: function boolean(x: integer, y: integer) = {
	return x == y;
}

B: function integer(c: char) = {
	if (c == '!')
		return 10;
	else {return 11;}
}

C: function char(a: string) = {
	return '!';
}

===[good5.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
23
Actual output:

Actual return code:
23
Test Passed!
===[good7.bminor Input]===
f: function void (i: integer) = {
	N: integer;
	for (N = 0; i > 0; i--) {
		print N;
		N = N + 1;
	}
}

main:function integer () = {
	N: integer = 6;
	for (;;N--) {
		f(N);
		print '\n';
		if (N == 0) return 0;
	}

	return 1;
}

===[good7.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
012345
01234
0123
012
01
0


Expected return code:
0
Actual output:
012345
01234
0123
012
01
0


Actual return code:
0
Test Passed!
===[good8.bminor Input]===
abs: function integer(n: integer);

digits: array [6] integer = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: integer = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}

===[good8.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
14 8 6168 42 

Expected return code:
0
Actual output:
14 8 6168 42 

Actual return code:
0
Test Passed!
===[good9.bminor Input]===
a: array[4] integer;
main: function integer() = {
	a[2] = 60;
	return a[2] + a[2] / 20 * 3 - a[1];
}

===[good9.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
69
Actual output:

Actual return code:
69
Test Passed!
===[good10.bminor Input]===
w: string = "no";

f: function void (s: string) = {
	{
		w: string = "ok";
		print w, "\n";
		w = "bad!\n";
	}
	print s, ' ', w;
	print " ";
	s = "changed\n";
	print s;
}

main:function integer ()= {
	s: string = "good";
	f(s);
	print s;

	return 0;
}

===[good10.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:
ok
good no changed
good
Expected return code:
0
Actual output:
ok
good no changed
good
Actual return code:
0
Test Passed!
===[good3.bminor Input]===
T: array [8] integer = {2, 1, 1, 2, 1, 2, 0, 3};

main:function integer ()=
{
	i: integer = 0;
        for (;;) {
		if (T[i] == 0) return T[5] + 10;
		else if (T[i] == 1) i++;
		else if (T[i] == 2) T[i++]--;
		else return 1;
	}

	return 0;
}

===[good3.bminor Compiler Output]===
Assembly code could not be generated:
std_out:
T resolves to global T
i resolves to local 0
T resolves to global T
T resolves to global T
i resolves to local 0
i resolves to local 0
T resolves to global T
i resolves to local 0
T resolves to global T
i resolves to local 0

std_err:

Return code:
-11
TEST NOT PASSED
===[good6.bminor Input]===
f: function boolean(b: boolean) = {
	return !b;
}

x: integer = 4;

main:function integer ()=
{
	y: integer = 10;
	if (f(f(f(f(f(x <= y)))))) return 1;
	else if (x < y - x*y) {
		return 4;
	} else return 2;
}

===[good6.bminor Compiler Output]===
Successfully generated code
TEST NOT PASSED
Assembly code did not compile to executable
===[good19.bminor Input]===
c1: integer = 1;
c3: integer = 100;

C: function integer(c1: integer, c2: integer) = {
	c3: integer = 11;
	c4: integer = 12;
	c5: integer = 13;
	return c1 + c2 + c3 + c4;
}

main: function integer() = {
	return C(1, 2);
}

===[good19.bminor Compiler Output]===
Successfully generated code
Successfully compiled assembly
Expected output:

Expected return code:
26
Actual output:

Actual return code:
26
Test Passed!
===== SUMMARIZED RESULTS =====
{
  "hidden_tests": {
    "correct": 17,
    "incorrect": 3
  },
  "student_tests": {
    "correct": 19,
    "incorrect": 1
  }
}
